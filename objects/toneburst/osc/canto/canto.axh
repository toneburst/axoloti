<patch-1.0 appVersion="1.0.10">
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Volume" x="322" y="28">
      <params>
         <frac32.u.map name="value" value="3.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="toneburst/osc/canto/canto.axo" uuid="28df314d-5479-4383-b602-c3fb0939b767" name="canto.axo_1" x="224" y="126">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
         <frac32.u.map name="phoneme" value="0.0"/>
         <frac32.u.map name="formant" value="0.0"/>
         <frac32.u.map name="roughness" value="0.0"/>
         <frac32.u.map name="srate" value="0.0"/>
         <frac32.u.map name="glidetime" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="3ac307b9f782049739ed62504081b96d580ea336" name="*_1" x="406" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="Output" x="476" y="126">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="70" y="140" text="Mod Inputs not connected"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="Glide Enable" x="140" y="196">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/scope 128 b" uuid="2b69f51a714fc276503ef10c349d6d253d1ae5e2" name="Waveform" x="476" y="238">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="826" y="252" text="Old Versions"/>
   <patcher type="patch/patcher" uuid="4b3dcd15-77d1-45ef-b63c-467bdb4f8a0c" name="Old Versions" x="826" y="280">
      <params/>
      <attribs/>
      <subpatch appVersion="1.0.10">
         <patchobj type="patch/object" uuid="dbd6f4a4-b454-441c-8261-473e4964d910" name="Canto 1.0.1" x="168" y="98">
            <params>
               <frac32.s.map name="pitch" value="-3.0"/>
               <frac32.u.map name="phoneme" value="19.5"/>
               <frac32.u.map name="formant" value="32.0"/>
               <frac32.u.map name="roughness" value="0.0"/>
               <frac32.u.map name="srate" value="0.0"/>
               <frac32.s.map name="glidetime" value="24.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="dbd6f4a4-b454-441c-8261-473e4964d910">
               <sDescription>8-bit speech formant synthesiser, based on Cantarino Arduino sketch by Peter Knight</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>canto.axh</helpPatch>
               <inlets>
                  <frac32.bipolar name="pitch" description="pitch input"/>
                  <frac32.positive name="phoneme" description="phoneme select"/>
                  <frac32.positive name="formant" description="formant shift"/>
                  <bool32 name="glide" description="glide on/off"/>
                  <frac32.positive name="glidetime" description="glide time"/>
               </inlets>
               <outlets>
                  <frac32buffer.bipolar name="wave" description="waveform"/>
                  <frac32 name="pindex" description="phoneme index"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.s.map.pitch name="pitch" description="pitch" noLabel="true"/>
                  <frac32.u.map name="phoneme" description="phoneme select"/>
                  <frac32.u.map name="formant" description="format shift"/>
                  <frac32.u.map name="roughness" description="roughness amt"/>
                  <frac32.u.map name="srate" description="sample-rate reduction"/>
                  <frac32.s.map.klineartime.exp2 name="glidetime"/>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[

////////////
// TABLES //
////////////

const int8_t sinCalc[256] = {
    /* This table rolls a lot of functions together for speed.
       Extracting phase and amplitude from the nybble packed form
       Sine calculation
       Exponential amplitude mapping
       Scaling to appropriate range

       ROUND(
         FLOOR(a/16,1)
         *SIN(
           2
           * PI()
           * IF(
             MOD(a,16),
             EXP(0.18*MOD(a,16)),
             0
           ) /16
         )*127
       ,0)
    */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2,2,3,3,4,5,6,7,8,10,12,14,17,20,24,
    0,4,4,5,6,7,9,11,13,15,18,22,26,31,37,45,
    0,5,6,7,8,10,12,14,17,20,24,28,34,41,49,58,
    0,5,6,7,9,10,12,15,18,21,26,31,37,44,53,63,
    0,5,6,7,8,10,12,14,17,20,24,28,34,41,49,58,
    0,4,4,5,6,7,9,11,13,15,18,22,26,31,37,45,
    0,2,2,3,3,4,5,6,7,8,10,12,14,17,20,24,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,-2,-2,-3,-3,-4,-5,-6,-7,-8,-10,-12,-14,-17,-20,-24,
    0,-4,-4,-5,-6,-7,-9,-11,-13,-15,-18,-22,-26,-31,-37,-45,
    0,-5,-6,-7,-8,-10,-12,-14,-17,-20,-24,-28,-34,-41,-49,-58,
    0,-5,-6,-7,-9,-10,-12,-15,-18,-21,-26,-31,-37,-44,-53,-63,
    0,-5,-6,-7,-8,-10,-12,-14,-17,-20,-24,-28,-34,-41,-49,-58,
    0,-4,-4,-5,-6,-7,-9,-11,-13,-15,-18,-22,-26,-31,-37,-45,
    0,-2,-2,-3,-3,-4,-5,-6,-7,-8,-10,-12,-14,-17,-20,-24
};

const int8_t sqrCalc[256] = {
    0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
    0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
    0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
    0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
    0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
    0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
    0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
    0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
    0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
    0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
    0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
    0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
    0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
    0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
    0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
    0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16
};

// The formant data has the following format:
// [formant1 phase-increment],[f2 phase-incr],[f3 phase-incr],
// [formant1 amplitude],[f2 amp],[f3 amp],
// [noise-mod]

const uint8_t formantTable[78][7] = {
	{0x0, 0x0, 0x0,0x0,0x0,0x0,0x0},/*00 space*/	{0x13,0x43,0x5b,0x0,0x0,0x0,0x0},/*01 .*/
	{0x13,0x43,0x5b,0x0,0x0,0x0,0x0},/*02 ?*/		{0x13,0x43,0x5b,0x0,0x0,0x0,0x0},/*03 ,*/
	{0x13,0x43,0x5b,0x0,0x0,0x0,0x0},/*04 -*/		{0xa,0x54,0x6e,0xd,0xa,0x8,0x0},/*05 IY*/
	{0xe,0x49,0x5d,0xd,0x8,0x7,0x0},/*06 IH*/		{0x13,0x43,0x5b,0xe,0xd,0x8,0x0},/*07 EH*/
	{0x18,0x3f,0x58,0xf,0xe,0x8,0x0},/*08 AE*/		{0x1b,0x28,0x59,0xf,0xd,0x1,0x0},/*09 AA*/
	{0x17,0x2c,0x57,0xf,0xc,0x1,0x0},/*10 AH*/		{0x15,0x1f,0x58,0xf,0xc,0x0,0x0},/*11 AO*/
	{0x10,0x25,0x52,0xf,0xb,0x1,0x0},/*12 UH*/		{0x14,0x2c,0x57,0xe,0xb,0x0,0x0},/*13 AX*/
	{0xe,0x49,0x5d,0xd,0xb,0x7,0x0},/*14 IX*/		{0x12,0x31,0x3e,0xc,0xb,0x5,0x0},/*15 ER*/
	{0xe,0x24,0x52,0xf,0xc,0x1,0x0},/*16 UX*/		{0x12,0x1e,0x58,0xf,0xc,0x0,0x0},/*17 OH*/
	{0x12,0x33,0x3e,0xd,0xc,0x6,0x0},/*18 RX*/		{0x10,0x25,0x6e,0xd,0x8,0x1,0x0},/*19 LX*/
	{0xd,0x1d,0x50,0xd,0x8,0x0,0x0},/*20 WX*/		{0xf,0x45,0x5d,0xe,0xc,0x7,0x0},/*21 YX*/
	{0xb,0x18,0x5a,0xd,0x8,0x0,0x0},/*22 WH*/		{0x12,0x32,0x3c,0xc,0xa,0x5,0x0},/*23 R*/
	{0xe,0x1e,0x6e,0xd,0x8,0x1,0x0},/*24 L*/		{0xb,0x18,0x5a,0xd,0x8,0x0,0x0},/*25 W*/
	{0x9,0x53,0x6e,0xd,0xa,0x8,0x0},/*26 Y*/		{0x6,0x2e,0x51,0xc,0x3,0x0,0x0},/*27 M*/
	{0x6,0x36,0x79,0x9,0x9,0x0,0x0},/*28 N*/		{0x6,0x56,0x65,0x9,0x6,0x3,0x0},/*29 NX*/
	{0x6,0x36,0x79,0x0,0x0,0x0,0x0},/*30 DX*/		{0x11,0x43,0x5b,0x0,0x0,0x0,0x0},/*31 Q*/
	{0x6,0x49,0x63,0x7,0xa,0xd,0xf},/*32 S*/		{0x6,0x4f,0x6a,0x0,0x0,0x0,0x0},/*33 SH*/
	{0x6,0x1a,0x51,0x3,0x3,0x3,0xf},/*34 F*/		{0x6,0x42,0x79,0x0,0x0,0x0,0x0},/*35 TH*/
	{0xe,0x49,0x5d,0x0,0x0,0x0,0x0},/*36 /H*/		{0x10,0x25,0x52,0x0,0x0,0x0,0x0},/*37 /X*/
	{0x9,0x33,0x5d,0xf,0x3,0x0,0x3},/*38 Z*/		{0xa,0x42,0x67,0xb,0x5,0x1,0x0},/*39 ZH*/
	{0x8,0x28,0x4c,0xb,0x3,0x0,0x0},/*40 V*/		{0xa,0x2f,0x5d,0xb,0x4,0x0,0x0},/*41 DH*/
	{0x6,0x4f,0x65,0x0,0x0,0x0,0x0},/*42 CHa*/		{0x6,0x4f,0x65,0x0,0x0,0x0,0x0},/*43 CHb*/
	{0x6,0x42,0x79,0x1,0x0,0x0,0x0},/*44 Ja*/		{0x5,0x42,0x79,0x1,0x0,0x0,0x0},/*45 Jb*/
	{0x6,0x6e,0x79,0x0,0xa,0xe,0x0},/*46 Jc*/		{0x0, 0x0, 0x0,0x2,0x2,0x1,0x0},/*47 Jd*/
	{0x13,0x48,0x5a,0xe,0xe,0x9,0x0},/*48 EY*/		{0x1b,0x27,0x58,0xf,0xd,0x1,0x0},/*49 AY*/
	{0x15,0x1f,0x58,0xf,0xc,0x0,0x0},/*50 OY*/		{0x1b,0x2b,0x58,0xf,0xd,0x1,0x0},/*51 AW*/
	{0x12,0x1e,0x58,0xf,0xc,0x0,0x0},/*52 OW*/		{0xd,0x22,0x52,0xd,0x8,0x0,0x0},/*53 UW*/
	{0x6,0x1a,0x51,0x2,0x0,0x0,0x0},/*54 Ba*/		{0x6,0x1a,0x51,0x4,0x1,0x0,0xf},/*55 Bb*/
	{0x6,0x1a,0x51,0x0,0x0,0x0,0x0},/*56 Bc*/		{0x6,0x42,0x79,0x2,0x0,0x0,0x0},/*57 Da*/
	{0x6,0x42,0x79,0x4,0x1,0x0,0xf},/*58 Db*/		{0x6,0x42,0x79,0x0,0x0,0x0,0x0},/*59 Dc*/
	{0x6,0x6e,0x70,0x1,0x0,0x0,0x0},/*60 Ga*/		{0x6,0x6e,0x6e,0x4,0x1,0x0,0xf},/*61 Gb*/
	{0x6,0x6e,0x6e,0x0,0x0,0x0,0x0},/*62 Gc*/		{0x6,0x54,0x5e,0x1,0x0,0x0,0x0},/*63 GXa*/
	{0x6,0x54,0x5e,0x4,0x1,0x0,0xf},/*64 GXb*/		{0x6,0x54,0x5e,0x0,0x0,0x0,0x0},/*65 GXc*/
	{0x6,0x1a,0x51,0x0,0x0,0x0,0x0},/*66 Pa*/		{0x6,0x1a,0x51,0x0,0x0,0x0,0x0},/*67 Pb*/
	{0x6,0x1a,0x51,0x0,0x0,0x0,0x0},/*68 Pc*/		{0x6,0x42,0x79,0x0,0x0,0x0,0x0},/*69 Ta*/
	{0x6,0x42,0x79,0x0,0x0,0x0,0x0},/*70 Tb*/		{0x6,0x42,0x79,0x0,0x0,0x0,0x0},/*71 Tc*/
	{0x6,0x6d,0x65,0x0,0x0,0x0,0x0},/*72 Ka*/		{0xa,0x56,0x65,0xc,0xa,0x7,0x0},/*73 Kb*/
	{0xa,0x6d,0x70,0x0,0x0,0x0,0x0},/*74 Kc*/		{0x6,0x54,0x5e,0x0,0x0,0x0,0x0},/*75 KXa*/
	{0x6,0x54,0x5e,0x0,0xa,0x5,0x0},/*76 KXb*/		{0x26,0x54,0x5e,0x20,0x20,0x0,0x0}/*77 KXc*/
};

// Vowel indices
const int vowels[19] = {
    5,6,7,8,9,10,11,12,13,14,16,17,21,48,49,50,51,52,53
};

// Sample-rate reduction divisor table
const uint8_t srateTable[8] = {
	1,2,4,8,16,32,64,128
};

//////////////////////
// GLOBAL VARIABLES //
//////////////////////

// Oscillator phases
uint32_t pitchPhase, pitchPhaseInc;
uint16_t form1Phase,form2Phase,form3Phase;
// Phase-increment values
uint16_t form1PhaseInc,form2PhaseInc,form3PhaseInc;
// Formant amplitudes
uint8_t form1Amp,form2Amp,form3Amp;
// Noise modulation
uint8_t noiseMod;

// Formant shift param
uint8_t formantScale;
// Roughness
uint8_t roughness;
// Sample-rate reduction divisor
uint8_t srateDivisor;
// Sample-rate counter (counts render loops)
uint8_t srateCounter;
// Phoneme-select param
uint8_t phoneme;
// Formant glide-time
int32_t glideTime;
// Stores 'noise' value for phase-reset in render loop
int8_t noise;
// Store final output value
int8_t outValue;

// Slew states and pointers
// formant phase-increment | formant amplitude | noise-mod
int32_t pitchSlewState;	int32_t *pitchSlewStatePtr = NULL;
int32_t f1pSlewState;	int32_t *f1pSlewStatePtr = NULL;
int32_t f2pSlewState;	int32_t *f2pSlewStatePtr = NULL;
int32_t f3pSlewState;	int32_t *f3pSlewStatePtr = NULL;
int32_t f1aSlewState;	int32_t *f1aSlewStatePtr = NULL;
int32_t f2aSlewState;	int32_t *f2aSlewStatePtr = NULL;
int32_t f3aSlewState;	int32_t *f3aSlewStatePtr = NULL;
int32_t fmSlewState;	int32_t *fmSlewStatePtr  = NULL;

///////////////
// Functions //
///////////////

// Slew function, with pointer to state variable
// Adapted from user 'glide_fast' user-contributed object by drj
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t slew(int32_t target, int32_t *state, int32_t slewTime, bool enable) {
	if (enable) {
		*state = ___SMMLA(*state - target, -slewTime << 2, *state);
		return *state;
	} else {
		*state = target;
		return target;
	};
}

]]></code.declaration>
               <code.init><![CDATA[

// Assign sample-rate vars
srateDivisor = 1;
srateCounter = 0;

// Assign slew-state pointers
pitchSlewStatePtr = &pitchSlewState;
f1pSlewStatePtr   = &f1pSlewState;
f2pSlewStatePtr   = &f2pSlewState;
f3pSlewStatePtr   = &f3pSlewState;
f1aSlewStatePtr   = &f1aSlewState;
f2aSlewStatePtr   = &f2aSlewState;
f3aSlewStatePtr   = &f3aSlewState;
fmSlewStatePtr    = &fmSlewState;

// Assign glide-time
glideTime = 0;]]></code.init>
               <code.krate><![CDATA[

////////////////////////////////
// Formant phase and amp vars //
////////////////////////////////

int16_t  startForm1PhaseInc,startForm2PhaseInc,startForm3PhaseInc;
uint8_t  startForm1Amp,startForm2Amp,startForm3Amp;
uint8_t  startMod;

///////////////////////////
// Process params/inlets //
///////////////////////////

// Scale formant amount
formantScale = (param_formant >> 20) + 5;

// Roughness param
roughness = param_roughness >> 23;

// Sample-rate divisor
srateDivisor = srateTable[(param_srate >> 24)];

// Phoneme selection
phoneme = param_phoneme >> 21;

// Glide-time param
glideTime = param_glidetime;

//////////////////////////
// Read vals from table //
//////////////////////////

// Calculate formant phase-increment | amp | noise-mod
// Pass result through slew function, with bit-shifting to/from 32-bit
form1PhaseInc = slew((formantTable[phoneme][0]*formantScale)<<16,f1pSlewStatePtr,glideTime,inlet_glide)>>16;
form2PhaseInc = slew((formantTable[phoneme][1]*formantScale)<<16,f2pSlewStatePtr,glideTime,inlet_glide)>>16;
form3PhaseInc = slew((formantTable[phoneme][2]*formantScale)<<16,f3pSlewStatePtr,glideTime,inlet_glide)>>16;
form1Amp = slew(formantTable[phoneme][3]<<24,f1aSlewStatePtr,glideTime,inlet_glide)>>24;
form2Amp = slew(formantTable[phoneme][4]<<24,f2aSlewStatePtr,glideTime,inlet_glide)>>24;
form3Amp = slew(formantTable[phoneme][5]<<24,f3aSlewStatePtr,glideTime,inlet_glide)>>24;
noiseMod = slew(formantTable[phoneme][6]<<24,fmSlewStatePtr,glideTime,inlet_glide)>>24;

// Calculate base pitch phase-increment
MTOFEXTENDED(param_pitch + inlet_pitch, pitchPhaseInc);
pitchPhaseInc = slew(pitchPhaseInc >> 2, pitchSlewStatePtr, param_glidetime, inlet_glide);

////////////////////////
// Fill Sample Buffer //
////////////////////////

for(uint8_t j = 0; j < BUFSIZE; j++) {
	// Final sample value
	int8_t value;

	// Noise
	int16_t phaseNoise = noise * (noiseMod + roughness);
	noise += noise << 2;
	noise++;

	// Mix formants
	form1Phase += form1PhaseInc;
	value  = sinCalc[(((form1Phase >> 8) & 0xf0) | form1Amp)];
	form2Phase += form2PhaseInc;
	value += sinCalc[(((form2Phase >> 8) & 0xf0) | form2Amp)];
	form3Phase += form3PhaseInc;
	value += sqrCalc[(((form3Phase >> 8) & 0xf0) | form3Amp)];

	// Final sample value
	value = (value * (0xff^(pitchPhase >> 24))) >> 8;
	pitchPhase += pitchPhaseInc;

	// Reset phase-increment to simulate noise
	if ((pitchPhase + (phaseNoise << 16)) < pitchPhaseInc) {
		form1Phase = 0;
		form2Phase = 0;
		form3Phase = 0;
	};

	// Sample-rate reduction
	if (srateCounter % srateDivisor == 0)
		outValue = value;

	// Final sample value
	outlet_wave[j] = outValue << 20;

	// Increment render loop counter
	srateCounter++;
};

// Send out phoneme index
outlet_pindex = phoneme;

]]></code.krate>
            </object>
         </patchobj>
         <patchobj type="patch/object" uuid="b18c31b2-5a1c-4e23-9d1e-ee8ab90539f6" name="Canto 1.0.5" x="322" y="98">
            <params>
               <frac32.s.map name="pitch" value="0.0"/>
               <frac32.u.map name="phoneme" value="0.0"/>
               <frac32.u.map name="formant" value="0.0"/>
               <frac32.u.map name="roughness" value="0.0"/>
               <frac32.u.map name="srate" value="0.0"/>
               <frac32.u.map name="glidetime" value="0.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="b18c31b2-5a1c-4e23-9d1e-ee8ab90539f6">
               <sDescription>8-bit speech formant synthesiser, based on Cantarino Arduino sketch by Peter Knight</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>canto.axh</helpPatch>
               <inlets>
                  <frac32.bipolar name="pitch" description="pitch input"/>
                  <frac32.positive name="phoneme" description="phoneme select"/>
                  <frac32.positive name="formant" description="formant shift"/>
                  <frac32.positive name="roughness"/>
                  <frac32.positive name="srate"/>
                  <bool32 name="glide" description="glide on/off"/>
                  <frac32.positive name="glidetime" description="glide time"/>
               </inlets>
               <outlets>
                  <frac32buffer.bipolar name="wave" description="waveform"/>
                  <frac32 name="pindex" description="phoneme index"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.s.map.pitch name="pitch" description="pitch" noLabel="true"/>
                  <frac32.u.map name="phoneme" description="phoneme select"/>
                  <frac32.u.map name="formant" description="formant position"/>
                  <frac32.u.map name="roughness" description="roughness amt"/>
                  <frac32.u.map name="srate" description="sample-rate reduction"/>
                  <frac32.u.map name="glidetime" description="glide time"/>
               </params>
               <attribs/>
               <includes>
                  <include>./canto_tables.h</include>
               </includes>
               <code.declaration><![CDATA[

//////////////////////
// GLOBAL VARIABLES //
//////////////////////

// Oscillator phases
uint32_t pitchPhase, pitchPhaseInc;
uint16_t form1Phase,form2Phase,form3Phase;
// Phase-increment values
uint16_t form1PhaseInc,form2PhaseInc,form3PhaseInc;
// Formant amplitudes
uint8_t form1Amp,form2Amp,form3Amp;
// Noise modulation
uint8_t noiseMod;

// Formant shift param
uint8_t formantScale;
// Roughness
uint8_t roughness;
// Sample-rate reduction divisor
uint8_t srateDivisor;
// Sample-rate counter (counts render loops)
uint8_t srateCounter;
// Phoneme-select param
uint8_t phoneme;
// Formant glide-time
int32_t glideTime;
// Stores 'noise' value for phase-reset in render loop
int8_t noise;
// Store final output value
int8_t outValue;

// Slew states and pointers
// Pitch phase-increment
int32_t pitchSlewState;	int32_t *pitchSlewStatePtr = NULL;
// Formant phase-increment
int32_t f1pSlewState;	int32_t *f1pSlewStatePtr = NULL;
int32_t f2pSlewState;	int32_t *f2pSlewStatePtr = NULL;
int32_t f3pSlewState;	int32_t *f3pSlewStatePtr = NULL;
//  Formant amplitude
int32_t f1aSlewState;	int32_t *f1aSlewStatePtr = NULL;
int32_t f2aSlewState;	int32_t *f2aSlewStatePtr = NULL;
int32_t f3aSlewState;	int32_t *f3aSlewStatePtr = NULL;
// Noise-mod
int32_t fmSlewState;	int32_t *fmSlewStatePtr  = NULL;

///////////////
// Functions //
///////////////

// Slew function, with pointer to state variable
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t slew(int32_t target, int32_t *state, int32_t slewTime, bool enable) {
	if (enable) {
		*state = ___SMMLA(*state - target, (-1 << 26) + (slewTime >> 1), *state);
		return *state;
	} else {
		*state = target;
		return target;
	};
}

]]></code.declaration>
               <code.init><![CDATA[

/*
// Assign sample-rate vars
srateDivisor = 1;
srateCounter = 0;

// Assign slew-state pointers
pitchSlewStatePtr = &pitchSlewState;
f1pSlewStatePtr   = &f1pSlewState;
f2pSlewStatePtr   = &f2pSlewState;
f3pSlewStatePtr   = &f3pSlewState;
f1aSlewStatePtr   = &f1aSlewState;
f2aSlewStatePtr   = &f2aSlewState;
f3aSlewStatePtr   = &f3aSlewState;
fmSlewStatePtr    = &fmSlewState;

]]></code.init>
               <code.krate><![CDATA[

////////////////////////////////////////
// Declare formant phase and amp vars //
////////////////////////////////////////

int16_t  startForm1PhaseInc,startForm2PhaseInc,startForm3PhaseInc;
//uint8_t  startForm1Amp,startForm2Amp,startForm3Amp;
//uint8_t  startMod;

///////////////////////////
// Process params/inlets //
///////////////////////////

// Phoneme selection
phoneme = __USAT(param_phoneme + inlet_phoneme, 27) >> 21;

// Shift/scale formant
formantScale = (__USAT(param_formant + inlet_formant, 27) >> 20) +5;

// Roughness
roughness = __USAT(param_roughness + inlet_roughness, 27) >> 23;

// Sample-rate divisor
srateDivisor = srateTable[__USAT(param_srate + inlet_srate, 27) >> 24];

// Glide-time
glideTime = __USAT(param_glidetime + inlet_glidetime, 27);

//////////////////////////////////
// Read formant vals from table //
//////////////////////////////////

// Calculate formant phase-increment | amp | noise-mod
// Pass result through slew function, with bit-shifting to/from 32-bit
form1PhaseInc = slew((formantTable[phoneme][0]*formantScale)<<16,f1pSlewStatePtr,glideTime,inlet_glide)>>16;
form2PhaseInc = slew((formantTable[phoneme][1]*formantScale)<<16,f2pSlewStatePtr,glideTime,inlet_glide)>>16;
form3PhaseInc = slew((formantTable[phoneme][2]*formantScale)<<16,f3pSlewStatePtr,glideTime,inlet_glide)>>16;
form1Amp = slew(formantTable[phoneme][3]<<24,f1aSlewStatePtr,glideTime,inlet_glide)>>24;
form2Amp = slew(formantTable[phoneme][4]<<24,f2aSlewStatePtr,glideTime,inlet_glide)>>24;
form3Amp = slew(formantTable[phoneme][5]<<24,f3aSlewStatePtr,glideTime,inlet_glide)>>24;
noiseMod = slew(formantTable[phoneme][6]<<24,fmSlewStatePtr,glideTime,inlet_glide)>>24;

// Calculate base pitch phase-increment
MTOFEXTENDED(param_pitch + inlet_pitch, pitchPhaseInc);
pitchPhaseInc = slew(pitchPhaseInc >> 2, pitchSlewStatePtr, param_glidetime, inlet_glide);

////////////////////////
// Fill Sample Buffer //
////////////////////////

for(uint8_t j = 0; j < BUFSIZE; j++) {
	// Final sample value
	int8_t value;

	// Noise
	int16_t phaseNoise = noise * (noiseMod + roughness);
	noise += noise << 2;
	noise++;

	// Mix formants
	form1Phase += form1PhaseInc;
	value  = sinCalc[(((form1Phase >> 8) & 0xf0) | form1Amp)];
	form2Phase += form2PhaseInc;
	value += sinCalc[(((form2Phase >> 8) & 0xf0) | form2Amp)];
	form3Phase += form3PhaseInc;
	value += sqrCalc[(((form3Phase >> 8) & 0xf0) | form3Amp)];

	// Final sample value
	value = (value * (0xff^(pitchPhase >> 24))) >> 8;
	pitchPhase += pitchPhaseInc;

	// Reset phase-increment to simulate noise
	if ((pitchPhase + (phaseNoise << 16)) < pitchPhaseInc) {
		form1Phase = 0;
		form2Phase = 0;
		form3Phase = 0;
	};

	// Sample-rate reduction
	if (srateCounter % srateDivisor == 0)
		outValue = value;

	// Final sample value
	outlet_wave[j] = outValue << 20;

	// Increment render loop counter
	srateCounter++;
};

// Send out phoneme index
outlet_pindex = phoneme;
*/

]]></code.krate>
            </object>
         </patchobj>
         <nets/>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_1" x="476" y="448">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="Output" inlet="left"/>
         <dest obj="Output" inlet="right"/>
      </net>
      <net>
         <source obj="canto.axo_1" outlet="wave"/>
         <dest obj="*_1" inlet="b"/>
      </net>
      <net>
         <source obj="Volume" outlet="out"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="Glide Enable" outlet="o"/>
         <dest obj="canto.axo_1" inlet="glide"/>
      </net>
      <net>
         <source obj="canto.axo_1" outlet="pindex"/>
         <dest obj="hex_1" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>349</x>
      <y>210</y>
      <width>1698</width>
      <height>1178</height>
   </windowPos>
</patch-1.0>