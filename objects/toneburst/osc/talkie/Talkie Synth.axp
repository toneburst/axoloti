<patch-1.0 appVersion="1.0.10">
   <patcher type="patch/patcher" uuid="04937fd2-4e9c-45d7-98c5-5562a81e84d6" name="K1" x="280" y="14">
      <params>
         <frac32.u.map name="Value" value="20.0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.10">
         <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Value" x="84" y="84">
            <params>
               <frac32.u.map name="value" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8" name="Param Max__" x="154" y="84">
            <params>
               <int32 name="max" value="131070"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8">
               <sDescription>greater than</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>math.axh</helpPatch>
               <inlets>
                  <frac32.positive name="val"/>
               </inlets>
               <outlets>
                  <int32.positive name="int" description="integer positive result"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="max">
                     <MinValue i="0"/>
                     <MaxValue i="134217727"/>
                  </int32>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[


// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_max) {
	return (int32_t)(float)val * (float)out_max / 0x07FFFFFF;
};

]]></code.declaration>
               <code.krate><![CDATA[

outlet_int = range_pos(__USAT(inlet_val, 27), param_max);

]]></code.krate>
            </object>
         </patchobj>
         <obj type="math/-" uuid="1643d55e6e7ce1c995a5e66db9f54fd969e6c9b7" name="-_1" x="252" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="outlet_1" x="336" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_2" x="154" y="182">
            <params/>
            <attribs>
               <spinner attributeName="value" value="65535"/>
            </attribs>
         </obj>
         <nets>
            <net>
               <source obj="Value" outlet="out"/>
               <dest obj="Param Max__" inlet="val"/>
            </net>
            <net>
               <source obj="Param Max__" outlet="int"/>
               <dest obj="-_1" inlet="in1"/>
            </net>
            <net>
               <source obj="i_2" outlet="out"/>
               <dest obj="-_1" inlet="in2"/>
            </net>
            <net>
               <source obj="-_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Volume" x="602" y="28">
      <params>
         <frac32.u.map name="value" value="17.5"/>
      </params>
      <attribs/>
   </obj>
   <patcher type="patch/patcher" uuid="e10de57f-dcd5-437e-8e3f-7bd2041c9f65" name="K2" x="378" y="42">
      <params>
         <frac32.u.map name="Value" value="30.0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.10">
         <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Value" x="84" y="84">
            <params>
               <frac32.u.map name="value" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8" name="Param Max__" x="154" y="84">
            <params>
               <int32 name="max" value="131070"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8">
               <sDescription>greater than</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>math.axh</helpPatch>
               <inlets>
                  <frac32.positive name="val"/>
               </inlets>
               <outlets>
                  <int32.positive name="int" description="integer positive result"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="max">
                     <MinValue i="0"/>
                     <MaxValue i="134217727"/>
                  </int32>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[


// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_max) {
	return (int32_t)(float)val * (float)out_max / 0x07FFFFFF;
};

]]></code.declaration>
               <code.krate><![CDATA[

outlet_int = range_pos(__USAT(inlet_val, 27), param_max);

]]></code.krate>
            </object>
         </patchobj>
         <obj type="math/-" uuid="1643d55e6e7ce1c995a5e66db9f54fd969e6c9b7" name="-_1" x="252" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="outlet_1" x="336" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_2" x="154" y="182">
            <params/>
            <attribs>
               <spinner attributeName="value" value="65535"/>
            </attribs>
         </obj>
         <nets>
            <net>
               <source obj="Value" outlet="out"/>
               <dest obj="Param Max__" inlet="val"/>
            </net>
            <net>
               <source obj="Param Max__" outlet="int"/>
               <dest obj="-_1" inlet="in1"/>
            </net>
            <net>
               <source obj="i_2" outlet="out"/>
               <dest obj="-_1" inlet="in2"/>
            </net>
            <net>
               <source obj="-_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_1" x="140" y="84">
      <params/>
      <attribs>
         <spinner attributeName="value" value="128"/>
      </attribs>
   </obj>
   <obj type="math/*" uuid="3ac307b9f782049739ed62504081b96d580ea336" name="*_1" x="672" y="112">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="742" y="112">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="2e3b980b-4415-428f-b6ca-29f283183066" name="==_1" x="504" y="126">
      <params>
         <frac32.s.map name="pitch" value="-11.0"/>
         <frac32.u.map name="noise" value="0.0"/>
         <frac32.u.map name="crush" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="2e3b980b-4415-428f-b6ca-29f283183066">
         <sDescription>equal</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <bool32 name="voiced"/>
            <int32.positive name="synthEnergy"/>
            <int32.positive name="synthPeriod"/>
            <int32.bipolar name="synthK1"/>
            <int32.bipolar name="synthK2"/>
            <int32.bipolar name="synthK3"/>
            <int32.bipolar name="synthK4"/>
            <int32.bipolar name="synthK5"/>
            <int32.bipolar name="synthK6"/>
            <int32.bipolar name="synthK7"/>
            <int32.bipolar name="synthK8"/>
            <int32.bipolar name="synthK9"/>
            <int32.bipolar name="synthK10"/>
            <frac32.positive name="noise"/>
            <frac32.positive name="crush"/>
            <frac32.bipolar name="pitch"/>
            <frac32buffer.bipolar name="osc"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="out"/>
            <int32 name="debugINT"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch"/>
            <frac32.u.map name="noise"/>
            <frac32.u.map name="crush"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[

///////////////
// Constants //
///////////////

const uint8_t tmsEnergy[0x10] = {0x00,0x02,0x03,0x04,0x05,0x07,0x0a,0x0f,0x14,0x20,0x29,0x39,0x51,0x72,0xa1,0xff};
const uint8_t tmsPeriod[0x40] = {0x00,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2D,0x2F,0x31,0x33,0x35,0x36,0x39,0x3B,0x3D,0x3F,0x42,0x45,0x47,0x49,0x4D,0x4F,0x51,0x55,0x57,0x5C,0x5F,0x63,0x66,0x6A,0x6E,0x73,0x77,0x7B,0x80,0x85,0x8A,0x8F,0x95,0x9A,0xA0};
const int16_t tmsK1[0x20]     = {0x82C0,0x8380,0x83C0,0x8440,0x84C0,0x8540,0x8600,0x8780,0x8880,0x8980,0x8AC0,0x8C00,0x8D40,0x8F00,0x90C0,0x92C0,0x9900,0xA140,0xAB80,0xB840,0xC740,0xD8C0,0xEBC0,0x0000,0x1440,0x2740,0x38C0,0x47C0,0x5480,0x5EC0,0x6700,0x6D40};
const int16_t tmsK2[0x20]     = {0xAE00,0xB480,0xBB80,0xC340,0xCB80,0xD440,0xDDC0,0xE780,0xF180,0xFBC0,0x0600,0x1040,0x1A40,0x2400,0x2D40,0x3600,0x3E40,0x45C0,0x4CC0,0x5300,0x5880,0x5DC0,0x6240,0x6640,0x69C0,0x6CC0,0x6F80,0x71C0,0x73C0,0x7580,0x7700,0x7E80};
const int8_t tmsK3[0x10]      = {0x92,0x9F,0xAD,0xBA,0xC8,0xD5,0xE3,0xF0,0xFE,0x0B,0x19,0x26,0x34,0x41,0x4F,0x5C};
const int8_t tmsK4[0x10]      = {0xAE,0xBC,0xCA,0xD8,0xE6,0xF4,0x01,0x0F,0x1D,0x2B,0x39,0x47,0x55,0x63,0x71,0x7E};
const int8_t tmsK5[0x10]      = {0xAE,0xBA,0xC5,0xD1,0xDD,0xE8,0xF4,0xFF,0x0B,0x17,0x22,0x2E,0x39,0x45,0x51,0x5C};
const int8_t tmsK6[0x10]      = {0xC0,0xCB,0xD6,0xE1,0xEC,0xF7,0x03,0x0E,0x19,0x24,0x2F,0x3A,0x45,0x50,0x5B,0x66};
const int8_t tmsK7[0x10]      = {0xB3,0xBF,0xCB,0xD7,0xE3,0xEF,0xFB,0x07,0x13,0x1F,0x2B,0x37,0x43,0x4F,0x5A,0x66};
const int8_t tmsK8[0x08]      = {0xC0,0xD8,0xF0,0x07,0x1F,0x37,0x4F,0x66};
const int8_t tmsK9[0x08]      = {0xC0,0xD4,0xE8,0xFC,0x10,0x25,0x39,0x4D};
const int8_t tmsK10[0x08]     = {0xCD,0xDF,0xF1,0x04,0x16,0x20,0x3B,0x4D};

#define CHIRP_SIZE 41
const int8_t chirp[CHIRP_SIZE] = {0x00,0x2a,0xd4,0x32,0xb2,0x12,0x25,0x14,0x02,0xe1,0xc5,0x02,0x5f,0x5a,0x05,0x0f,0x26,0xfc,0xa5,0xa5,0xd6,0xdd,0xdc,0xfc,0x25,0x2b,0x22,0x21,0x0f,0xff,0xf8,0xee,0xed,0xef,0xf7,0xf6,0xfa,0x00,0x03,0x02,0x01};

uint8_t synthPeriod;
uint16_t synthEnergy;
int16_t synthK1,synthK2;
int8_t synthK3,synthK4,synthK5,synthK6,synthK7,synthK8,synthK9,synthK10;
uint8_t periodCounter;

int16_t x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10;

//////////////////
// Render Audio //
//////////////////

int8_t tk_renderVoice() {
	int16_t u0,u1,u2,u3,u4,u5,u6,u7,u8,u9,u10;

	synthPeriod = tmsPeriod[u8mix(synthPeriod, 65 - (pitch >> 21), 255)];
	
	// Generate voiced source
	static int16_t voicedSource;

	// Scan index 0 > 31 of chirp table with no interpolation
	voicedSource = chirp[oscPhase >> 27];
    	
    	/*if (periodCounter < synthPeriod) {
    		periodCounter++;
    	} else {
    		periodCounter = 0;
    	}
    	if (periodCounter < CHIRP_SIZE) {
    		voicedSource = ((chirp[periodCounter]) * (uint32_t) synthEnergy) >> 8;
    	} else {
    		voicedSource = 0;
    	}*/

	// Generate unvoiced noise source
	static int16_t unvoicedSource;
    	static uint16_t synthRand = 1;
    	synthRand = (synthRand >> 1) ^ ((synthRand & 1) ? 0xB800 : 0);
    	unvoicedSource = (synthRand & 1) ? synthEnergy : -synthEnergy;

    	// Switch voiced/unvoiced source
	if (synthPeriod) {
		u10 = voicedSource;//u8mix(voicedSource, unvoicedSource, noise);
    	} else {
    		u10 = unvoicedSource;
    	}
    	
    	// Lattice filter forward path
    	u9 = u10 - (((int16_t)synthK10*x9) >> 7);
	u8 = u9  - (((int16_t)synthK9*x8) >> 7);
	u7 = u8  - (((int16_t)synthK8*x7) >> 7);
	u6 = u7  - (((int16_t)synthK7*x6) >> 7);
	u5 = u6  - (((int16_t)synthK6*x5) >> 7);
	u4 = u5  - (((int16_t)synthK5*x4) >> 7);
	u3 = u4  - (((int16_t)synthK4*x3) >> 7);
	u2 = u3  - (((int16_t)synthK3*x2) >> 7);
	u1 = u2  - (((int32_t)synthK2*x1) >> 15);
	u0 = u1  - (((int32_t)synthK1*x0) >> 15);
	
	// Output clamp to 9 bits (-512 to 511)
	u0 = __SSAT(u0, 9);

	// Lattice filter reverse path
	x9 = x8 + (((int16_t)synthK9*u8) >> 7);
	x8 = x7 + (((int16_t)synthK8*u7) >> 7);
	x7 = x6 + (((int16_t)synthK7*u6) >> 7);
	x6 = x5 + (((int16_t)synthK6*u5) >> 7);
	x5 = x4 + (((int16_t)synthK5*u4) >> 7);
	x4 = x3 + (((int16_t)synthK4*u3) >> 7);
	x3 = x2 + (((int16_t)synthK3*u2) >> 7);
	x2 = x1 + (((int32_t)synthK2*u1) >> 15);
	x1 = x0 + (((int32_t)synthK1*u0) >> 15);
	x0 = u0;

	// Bit-shift return value to -255 to 254 range
	return u10;//u0 >> 1;
}

///////////////////////
// Utility Functions //
///////////////////////

// Scale input to range out_min > out_max
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_min, int32_t out_max) {
	float x = (float)val;
	float outMin = (float)out_min;
	float outMax = (float)out_max;
	return (int32_t)(x * (outMax - outMin) / 0x07FFFFFF + outMin);
};

__attribute__ ( ( always_inline ) ) __STATIC_INLINE int8_t u8mix(int8_t a, int8_t b, uint8_t x) {
	return x * b + (255 - x) * a >> 8;
}

///////////////////
// Params/Inlets //
///////////////////

uint32_t pitch;
uint32_t crush;
uint8_t noise;

int32_t sample;
int8_t extOsc;
int32_t oscPhase;

uint8_t renderCounter;
uint8_t renderInterval;

]]></code.declaration>
         <code.init><![CDATA[

// Counters (count S-Rate cycles)
renderCounter = 0;
// S-Rate cycle periods for sample-calculate function
renderInterval = 6;

// Calculated output sample value
sample = 0;
extOsc = 0;

// Inlets/Param values
pitch = 0;
crush = 9;
noise = 0;

oscPhase = 0;

]]></code.init>
         <code.krate><![CDATA[

uint32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch, freq);
freq = __USAT(freq * 3, 30);
oscPhase += freq;
outlet_debugINT = freq;


synthPeriod = __USAT(inlet_synthPeriod, 8);
synthEnergy = __USAT(inlet_synthEnergy, 16);
synthK1  = __SSAT(inlet_synthK1, 16);
synthK2  = __SSAT(inlet_synthK2, 16);
synthK3  = __SSAT(inlet_synthK3,  8);
synthK4  = __SSAT(inlet_synthK4,  8);
synthK5  = __SSAT(inlet_synthK5,  8);
synthK6  = __SSAT(inlet_synthK6,  8);
synthK7  = __SSAT(inlet_synthK7,  8);
synthK8  = __SSAT(inlet_synthK8,  8);
synthK9  = __SSAT(inlet_synthK9,  8);
synthK10 = __SSAT(inlet_synthK10, 8);

///////////////////
// Params/Inlets //
///////////////////

pitch = __USAT(param_pitch + inlet_pitch, 27);
noise = __USAT(param_noise + inlet_noise, 27) >> 19;
crush = range_pos(__USAT(param_crush + inlet_crush, 27), 0, 7);

/////////////////
// Render Loop //
/////////////////

for(uint8_t j = 0; j < BUFSIZE; j++) {

	///////////////////
	// Render Sample //
	///////////////////
	
	if(renderCounter == 0) {
		// Capture external ocsillator input
		extOsc = inlet_osc[j] >> 19;
		// Render voice samples
		sample = tk_renderVoice();
		// Bit-reduction
		if(crush > 0)
			sample = (sample >> crush) << crush;
	}
	// Increment render counter
	renderCounter = (renderCounter < (renderInterval - 1)) ? renderCounter + 1 : 0;
	
	// Write samples to output buffer (27 bits)
	outlet_out[j] = sample << 19;
}

]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="2e3b980b-4415-428f-b6ca-29f283183066" name="1.0.0" x="938" y="126">
      <params>
         <frac32.u.map name="pitch" value="0.0"/>
         <frac32.u.map name="noise" value="33.5"/>
         <frac32.u.map name="crush" value="2.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="2e3b980b-4415-428f-b6ca-29f283183066">
         <sDescription>equal</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <bool32 name="voiced"/>
            <int32.positive name="synthEnergy"/>
            <int32.positive name="synthPeriod"/>
            <int32.bipolar name="synthK1"/>
            <int32.bipolar name="synthK2"/>
            <int32.bipolar name="synthK3"/>
            <int32.bipolar name="synthK4"/>
            <int32.bipolar name="synthK5"/>
            <int32.bipolar name="synthK6"/>
            <int32.bipolar name="synthK7"/>
            <int32.bipolar name="synthK8"/>
            <int32.bipolar name="synthK9"/>
            <int32.bipolar name="synthK10"/>
            <frac32.positive name="noise"/>
            <frac32.positive name="crush"/>
            <frac32.positive name="pitch"/>
            <frac32buffer.bipolar name="osc"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="out"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="pitch"/>
            <frac32.u.map name="noise"/>
            <frac32.u.map name="crush"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[

///////////////
// Constants //
///////////////

const uint8_t tmsEnergy[0x10] = {0x00,0x02,0x03,0x04,0x05,0x07,0x0a,0x0f,0x14,0x20,0x29,0x39,0x51,0x72,0xa1,0xff};
const uint8_t tmsPeriod[0x40] = {0x00,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2D,0x2F,0x31,0x33,0x35,0x36,0x39,0x3B,0x3D,0x3F,0x42,0x45,0x47,0x49,0x4D,0x4F,0x51,0x55,0x57,0x5C,0x5F,0x63,0x66,0x6A,0x6E,0x73,0x77,0x7B,0x80,0x85,0x8A,0x8F,0x95,0x9A,0xA0};
const int16_t tmsK1[0x20]     = {0x82C0,0x8380,0x83C0,0x8440,0x84C0,0x8540,0x8600,0x8780,0x8880,0x8980,0x8AC0,0x8C00,0x8D40,0x8F00,0x90C0,0x92C0,0x9900,0xA140,0xAB80,0xB840,0xC740,0xD8C0,0xEBC0,0x0000,0x1440,0x2740,0x38C0,0x47C0,0x5480,0x5EC0,0x6700,0x6D40};
const int16_t tmsK2[0x20]     = {0xAE00,0xB480,0xBB80,0xC340,0xCB80,0xD440,0xDDC0,0xE780,0xF180,0xFBC0,0x0600,0x1040,0x1A40,0x2400,0x2D40,0x3600,0x3E40,0x45C0,0x4CC0,0x5300,0x5880,0x5DC0,0x6240,0x6640,0x69C0,0x6CC0,0x6F80,0x71C0,0x73C0,0x7580,0x7700,0x7E80};
const int8_t tmsK3[0x10]      = {0x92,0x9F,0xAD,0xBA,0xC8,0xD5,0xE3,0xF0,0xFE,0x0B,0x19,0x26,0x34,0x41,0x4F,0x5C};
const int8_t tmsK4[0x10]      = {0xAE,0xBC,0xCA,0xD8,0xE6,0xF4,0x01,0x0F,0x1D,0x2B,0x39,0x47,0x55,0x63,0x71,0x7E};
const int8_t tmsK5[0x10]      = {0xAE,0xBA,0xC5,0xD1,0xDD,0xE8,0xF4,0xFF,0x0B,0x17,0x22,0x2E,0x39,0x45,0x51,0x5C};
const int8_t tmsK6[0x10]      = {0xC0,0xCB,0xD6,0xE1,0xEC,0xF7,0x03,0x0E,0x19,0x24,0x2F,0x3A,0x45,0x50,0x5B,0x66};
const int8_t tmsK7[0x10]      = {0xB3,0xBF,0xCB,0xD7,0xE3,0xEF,0xFB,0x07,0x13,0x1F,0x2B,0x37,0x43,0x4F,0x5A,0x66};
const int8_t tmsK8[0x08]      = {0xC0,0xD8,0xF0,0x07,0x1F,0x37,0x4F,0x66};
const int8_t tmsK9[0x08]      = {0xC0,0xD4,0xE8,0xFC,0x10,0x25,0x39,0x4D};
const int8_t tmsK10[0x08]     = {0xCD,0xDF,0xF1,0x04,0x16,0x20,0x3B,0x4D};

#define CHIRP_SIZE 41
const int8_t chirp[CHIRP_SIZE] = {0x00,0x2a,0xd4,0x32,0xb2,0x12,0x25,0x14,0x02,0xe1,0xc5,0x02,0x5f,0x5a,0x05,0x0f,0x26,0xfc,0xa5,0xa5,0xd6,0xdd,0xdc,0xfc,0x25,0x2b,0x22,0x21,0x0f,0xff,0xf8,0xee,0xed,0xef,0xf7,0xf6,0xfa,0x00,0x03,0x02,0x01};

uint8_t synthPeriod;
uint16_t synthEnergy;
int16_t synthK1,synthK2;
int8_t synthK3,synthK4,synthK5,synthK6,synthK7,synthK8,synthK9,synthK10;
uint8_t periodCounter;

int16_t x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10;
int32_t sample;
int8_t extOsc;

uint8_t renderCounter;
uint8_t renderInterval;

//////////////////
// Render Audio //
//////////////////

int8_t tk_renderVoice() {
	int16_t u0,u1,u2,u3,u4,u5,u6,u7,u8,u9,u10;

	synthPeriod = tmsPeriod[u8mix(synthPeriod, 65 - (pitch >> 21), 255)];
	
	// Generate voiced source
	static int16_t voicedSource;
    	if (periodCounter < synthPeriod) {
    		periodCounter++;
    	} else {
    		periodCounter = 0;
    	}
    	if (periodCounter < CHIRP_SIZE) {
    		voicedSource = ((chirp[periodCounter]) * (uint32_t) synthEnergy) >> 8;
    	} else {
    		voicedSource = 0;
    	}

	// Generate unvoiced noise source
	static int16_t unvoicedSource;
    	static uint16_t synthRand = 1;
    	synthRand = (synthRand >> 1) ^ ((synthRand & 1) ? 0xB800 : 0);
    	unvoicedSource = (synthRand & 1) ? synthEnergy : -synthEnergy;

    	// Switch voiced/unvoiced source
	if (synthPeriod) {
		u10 = extOsc;//u8mix(voicedSource, unvoicedSource, noise);
    	} else {
    		u10 = unvoicedSource;
    	}
    	
    	// Lattice filter forward path
    	u9 = u10 - (((int16_t)synthK10*x9) >> 7);
	u8 = u9  - (((int16_t)synthK9*x8) >> 7);
	u7 = u8  - (((int16_t)synthK8*x7) >> 7);
	u6 = u7  - (((int16_t)synthK7*x6) >> 7);
	u5 = u6  - (((int16_t)synthK6*x5) >> 7);
	u4 = u5  - (((int16_t)synthK5*x4) >> 7);
	u3 = u4  - (((int16_t)synthK4*x3) >> 7);
	u2 = u3  - (((int16_t)synthK3*x2) >> 7);
	u1 = u2  - (((int32_t)synthK2*x1) >> 15);
	u0 = u1  - (((int32_t)synthK1*x0) >> 15);
	
	// Output clamp to 9 bits (-512 to 511)
	u0 = __SSAT(u0, 9);

	// Lattice filter reverse path
	x9 = x8 + (((int16_t)synthK9*u8) >> 7);
	x8 = x7 + (((int16_t)synthK8*u7) >> 7);
	x7 = x6 + (((int16_t)synthK7*u6) >> 7);
	x6 = x5 + (((int16_t)synthK6*u5) >> 7);
	x5 = x4 + (((int16_t)synthK5*u4) >> 7);
	x4 = x3 + (((int16_t)synthK4*u3) >> 7);
	x3 = x2 + (((int16_t)synthK3*u2) >> 7);
	x2 = x1 + (((int32_t)synthK2*u1) >> 15);
	x1 = x0 + (((int32_t)synthK1*u0) >> 15);
	x0 = u0;

	// Bit-shift return value to -255 to 254 range
	return u0 >> 1;
}

///////////////////////
// Utility Functions //
///////////////////////

// Scale input to range out_min > out_max
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_min, int32_t out_max) {
	float x = (float)val;
	float outMin = (float)out_min;
	float outMax = (float)out_max;
	return (int32_t)(x * (outMax - outMin) / 0x07FFFFFF + outMin);
};

__attribute__ ( ( always_inline ) ) __STATIC_INLINE int8_t u8mix(int8_t a, int8_t b, uint8_t x) {
	return x * b + (255 - x) * a >> 8;
}

///////////////////
// Params/Inlets //
///////////////////

uint32_t pitch;
uint32_t crush;
uint8_t noise;

]]></code.declaration>
         <code.init><![CDATA[

// Counters (count S-Rate cycles)
renderCounter = 0;
// S-Rate cycle periods for sample-calculate function
renderInterval = 6;

// Calculated output sample value
sample = 0;
extOsc = 0;

// Inlets/Param values
pitch = 0;
crush = 9;
noise = 0;

]]></code.init>
         <code.krate><![CDATA[

synthPeriod = __USAT(inlet_synthPeriod, 8);
synthEnergy = __USAT(inlet_synthEnergy, 16);
synthK1  = __SSAT(inlet_synthK1, 16);
synthK2  = __SSAT(inlet_synthK2, 16);
synthK3  = __SSAT(inlet_synthK3,  8);
synthK4  = __SSAT(inlet_synthK4,  8);
synthK5  = __SSAT(inlet_synthK5,  8);
synthK6  = __SSAT(inlet_synthK6,  8);
synthK7  = __SSAT(inlet_synthK7,  8);
synthK8  = __SSAT(inlet_synthK8,  8);
synthK9  = __SSAT(inlet_synthK9,  8);
synthK10 = __SSAT(inlet_synthK10, 8);

///////////////////
// Params/Inlets //
///////////////////

pitch = __USAT(param_pitch + inlet_pitch, 27);
noise = __USAT(param_noise + inlet_noise, 27) >> 19;
crush = range_pos(__USAT(param_crush + inlet_crush, 27), 0, 7);

/////////////////
// Render Loop //
/////////////////

for(uint8_t j = 0; j < BUFSIZE; j++) {

	///////////////////
	// Render Sample //
	///////////////////
	
	if(renderCounter == 0) {
		// Capture external ocsillator input
		extOsc = inlet_osc[j] >> 19;
		// Render voice samples
		sample = tk_renderVoice();
		// Bit-reduction
		if(crush > 0)
			sample = (sample >> crush) << crush;
	}
	// Increment render counter
	renderCounter = (renderCounter < (renderInterval - 1)) ? renderCounter + 1 : 0;
	
	// Write samples to output buffer (27 bits)
	outlet_out[j] = sample << 19;
}

]]></code.krate>
      </object>
   </patchobj>
   <patcher type="patch/patcher" uuid="c510461a-5b88-4723-8352-3ab64e4907c8" name="K3" x="280" y="140">
      <params>
         <frac32.u.map name="Value" value="30.5"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.10">
         <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Value" x="70" y="84">
            <params>
               <frac32.u.map name="value" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8" name="Param Max__" x="154" y="84">
            <params>
               <int32 name="max" value="511"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8">
               <sDescription>greater than</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>math.axh</helpPatch>
               <inlets>
                  <frac32.positive name="val"/>
               </inlets>
               <outlets>
                  <int32.positive name="int" description="integer positive result"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="max">
                     <MinValue i="0"/>
                     <MaxValue i="134217727"/>
                  </int32>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[


// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_max) {
	return (int32_t)(float)val * (float)out_max / 0x07FFFFFF;
};

]]></code.declaration>
               <code.krate><![CDATA[

outlet_int = range_pos(__USAT(inlet_val, 27), param_max);

]]></code.krate>
            </object>
         </patchobj>
         <obj type="math/-" uuid="1643d55e6e7ce1c995a5e66db9f54fd969e6c9b7" name="-_1" x="252" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="outlet_1" x="336" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_2" x="154" y="182">
            <params/>
            <attribs>
               <spinner attributeName="value" value="255"/>
            </attribs>
         </obj>
         <nets>
            <net>
               <source obj="Value" outlet="out"/>
               <dest obj="Param Max__" inlet="val"/>
            </net>
            <net>
               <source obj="Param Max__" outlet="int"/>
               <dest obj="-_1" inlet="in1"/>
            </net>
            <net>
               <source obj="i_2" outlet="out"/>
               <dest obj="-_1" inlet="in2"/>
            </net>
            <net>
               <source obj="-_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Volume_" x="70" y="154">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8" name="Param Max_" x="140" y="154">
      <params>
         <int32 name="max" value="279"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8">
         <sDescription>greater than</sDescription>
         <author>toneburst</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32.positive name="val"/>
         </inlets>
         <outlets>
            <int32.positive name="int" description="integer positive result"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="max">
               <MinValue i="0"/>
               <MaxValue i="134217727"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[


// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_max) {
	return (int32_t)(float)val * (float)out_max / 0x07FFFFFF;
};

]]></code.declaration>
         <code.krate><![CDATA[

outlet_int = range_pos(__USAT(inlet_val, 27), param_max);

]]></code.krate>
      </object>
   </patchobj>
   <patcher type="patch/patcher" uuid="dea5f0df-b215-465d-943d-8674b900f889" name="K4" x="378" y="168">
      <params>
         <frac32.u.map name="Value" value="30.5"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.10">
         <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Value" x="84" y="84">
            <params>
               <frac32.u.map name="value" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8" name="Param Max__" x="154" y="84">
            <params>
               <int32 name="max" value="511"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8">
               <sDescription>greater than</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>math.axh</helpPatch>
               <inlets>
                  <frac32.positive name="val"/>
               </inlets>
               <outlets>
                  <int32.positive name="int" description="integer positive result"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="max">
                     <MinValue i="0"/>
                     <MaxValue i="134217727"/>
                  </int32>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[


// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_max) {
	return (int32_t)(float)val * (float)out_max / 0x07FFFFFF;
};

]]></code.declaration>
               <code.krate><![CDATA[

outlet_int = range_pos(__USAT(inlet_val, 27), param_max);

]]></code.krate>
            </object>
         </patchobj>
         <obj type="math/-" uuid="1643d55e6e7ce1c995a5e66db9f54fd969e6c9b7" name="-_1" x="252" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="outlet_1" x="336" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_2" x="154" y="182">
            <params/>
            <attribs>
               <spinner attributeName="value" value="255"/>
            </attribs>
         </obj>
         <nets>
            <net>
               <source obj="Value" outlet="out"/>
               <dest obj="Param Max__" inlet="val"/>
            </net>
            <net>
               <source obj="Param Max__" outlet="int"/>
               <dest obj="-_1" inlet="in1"/>
            </net>
            <net>
               <source obj="i_2" outlet="out"/>
               <dest obj="-_1" inlet="in2"/>
            </net>
            <net>
               <source obj="-_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_2" x="672" y="182">
      <params/>
      <attribs/>
   </obj>
   <patcher type="patch/patcher" uuid="e1026c81-96b1-4516-8150-53d5b7fa7927" name="K5" x="280" y="266">
      <params>
         <frac32.u.map name="Value" value="41.5"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.10">
         <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Value" x="84" y="84">
            <params>
               <frac32.u.map name="value" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8" name="Param Max__" x="154" y="84">
            <params>
               <int32 name="max" value="511"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8">
               <sDescription>greater than</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>math.axh</helpPatch>
               <inlets>
                  <frac32.positive name="val"/>
               </inlets>
               <outlets>
                  <int32.positive name="int" description="integer positive result"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="max">
                     <MinValue i="0"/>
                     <MaxValue i="134217727"/>
                  </int32>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[


// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_max) {
	return (int32_t)(float)val * (float)out_max / 0x07FFFFFF;
};

]]></code.declaration>
               <code.krate><![CDATA[

outlet_int = range_pos(__USAT(inlet_val, 27), param_max);

]]></code.krate>
            </object>
         </patchobj>
         <obj type="math/-" uuid="1643d55e6e7ce1c995a5e66db9f54fd969e6c9b7" name="-_1" x="252" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="outlet_1" x="336" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_2" x="154" y="182">
            <params/>
            <attribs>
               <spinner attributeName="value" value="255"/>
            </attribs>
         </obj>
         <nets>
            <net>
               <source obj="Value" outlet="out"/>
               <dest obj="Param Max__" inlet="val"/>
            </net>
            <net>
               <source obj="Param Max__" outlet="int"/>
               <dest obj="-_1" inlet="in1"/>
            </net>
            <net>
               <source obj="i_2" outlet="out"/>
               <dest obj="-_1" inlet="in2"/>
            </net>
            <net>
               <source obj="-_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <patcher type="patch/patcher" uuid="492a436d-68d9-449e-b527-85d0bb7763ca" name="K6" x="378" y="294">
      <params>
         <frac32.u.map name="Value" value="40.5"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.10">
         <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Value" x="84" y="84">
            <params>
               <frac32.u.map name="value" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8" name="Param Max__" x="154" y="84">
            <params>
               <int32 name="max" value="511"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8">
               <sDescription>greater than</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>math.axh</helpPatch>
               <inlets>
                  <frac32.positive name="val"/>
               </inlets>
               <outlets>
                  <int32.positive name="int" description="integer positive result"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="max">
                     <MinValue i="0"/>
                     <MaxValue i="134217727"/>
                  </int32>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[


// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_max) {
	return (int32_t)(float)val * (float)out_max / 0x07FFFFFF;
};

]]></code.declaration>
               <code.krate><![CDATA[

outlet_int = range_pos(__USAT(inlet_val, 27), param_max);

]]></code.krate>
            </object>
         </patchobj>
         <obj type="math/-" uuid="1643d55e6e7ce1c995a5e66db9f54fd969e6c9b7" name="-_1" x="252" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="outlet_1" x="336" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_2" x="154" y="182">
            <params/>
            <attribs>
               <spinner attributeName="value" value="255"/>
            </attribs>
         </obj>
         <nets>
            <net>
               <source obj="Value" outlet="out"/>
               <dest obj="Param Max__" inlet="val"/>
            </net>
            <net>
               <source obj="Param Max__" outlet="int"/>
               <dest obj="-_1" inlet="in1"/>
            </net>
            <net>
               <source obj="i_2" outlet="out"/>
               <dest obj="-_1" inlet="in2"/>
            </net>
            <net>
               <source obj="-_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <patcher type="patch/patcher" uuid="802b9719-fbae-4f76-bc8e-63e85a720d93" name="K7" x="280" y="392">
      <params>
         <frac32.u.map name="Value" value="25.5"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.10">
         <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Value" x="84" y="84">
            <params>
               <frac32.u.map name="value" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8" name="Param Max__" x="154" y="84">
            <params>
               <int32 name="max" value="511"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8">
               <sDescription>greater than</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>math.axh</helpPatch>
               <inlets>
                  <frac32.positive name="val"/>
               </inlets>
               <outlets>
                  <int32.positive name="int" description="integer positive result"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="max">
                     <MinValue i="0"/>
                     <MaxValue i="134217727"/>
                  </int32>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[


// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_max) {
	return (int32_t)(float)val * (float)out_max / 0x07FFFFFF;
};

]]></code.declaration>
               <code.krate><![CDATA[

outlet_int = range_pos(__USAT(inlet_val, 27), param_max);

]]></code.krate>
            </object>
         </patchobj>
         <obj type="math/-" uuid="1643d55e6e7ce1c995a5e66db9f54fd969e6c9b7" name="-_1" x="252" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="outlet_1" x="336" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_2" x="154" y="182">
            <params/>
            <attribs>
               <spinner attributeName="value" value="255"/>
            </attribs>
         </obj>
         <nets>
            <net>
               <source obj="Value" outlet="out"/>
               <dest obj="Param Max__" inlet="val"/>
            </net>
            <net>
               <source obj="Param Max__" outlet="int"/>
               <dest obj="-_1" inlet="in1"/>
            </net>
            <net>
               <source obj="i_2" outlet="out"/>
               <dest obj="-_1" inlet="in2"/>
            </net>
            <net>
               <source obj="-_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <patcher type="patch/patcher" uuid="164c5540-1418-4960-ba00-b293417eea16" name="K8" x="378" y="420">
      <params>
         <frac32.u.map name="Value" value="34.0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.10">
         <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Value" x="84" y="84">
            <params>
               <frac32.u.map name="value" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8" name="Param Max__" x="154" y="84">
            <params>
               <int32 name="max" value="511"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8">
               <sDescription>greater than</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>math.axh</helpPatch>
               <inlets>
                  <frac32.positive name="val"/>
               </inlets>
               <outlets>
                  <int32.positive name="int" description="integer positive result"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="max">
                     <MinValue i="0"/>
                     <MaxValue i="134217727"/>
                  </int32>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[


// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_max) {
	return (int32_t)(float)val * (float)out_max / 0x07FFFFFF;
};

]]></code.declaration>
               <code.krate><![CDATA[

outlet_int = range_pos(__USAT(inlet_val, 27), param_max);

]]></code.krate>
            </object>
         </patchobj>
         <obj type="math/-" uuid="1643d55e6e7ce1c995a5e66db9f54fd969e6c9b7" name="-_1" x="252" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="outlet_1" x="336" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_2" x="154" y="182">
            <params/>
            <attribs>
               <spinner attributeName="value" value="255"/>
            </attribs>
         </obj>
         <nets>
            <net>
               <source obj="Value" outlet="out"/>
               <dest obj="Param Max__" inlet="val"/>
            </net>
            <net>
               <source obj="Param Max__" outlet="int"/>
               <dest obj="-_1" inlet="in1"/>
            </net>
            <net>
               <source obj="i_2" outlet="out"/>
               <dest obj="-_1" inlet="in2"/>
            </net>
            <net>
               <source obj="-_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <patcher type="patch/patcher" uuid="7a49c37b-b7d3-4f8d-98a8-bdbdc3f0d54e" name="K9" x="280" y="518">
      <params>
         <frac32.u.map name="Value" value="42.5"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.10">
         <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Value" x="84" y="84">
            <params>
               <frac32.u.map name="value" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8" name="Param Max__" x="154" y="84">
            <params>
               <int32 name="max" value="511"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8">
               <sDescription>greater than</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>math.axh</helpPatch>
               <inlets>
                  <frac32.positive name="val"/>
               </inlets>
               <outlets>
                  <int32.positive name="int" description="integer positive result"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="max">
                     <MinValue i="0"/>
                     <MaxValue i="134217727"/>
                  </int32>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[


// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_max) {
	return (int32_t)(float)val * (float)out_max / 0x07FFFFFF;
};

]]></code.declaration>
               <code.krate><![CDATA[

outlet_int = range_pos(__USAT(inlet_val, 27), param_max);

]]></code.krate>
            </object>
         </patchobj>
         <obj type="math/-" uuid="1643d55e6e7ce1c995a5e66db9f54fd969e6c9b7" name="-_1" x="252" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="outlet_1" x="336" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_2" x="154" y="182">
            <params/>
            <attribs>
               <spinner attributeName="value" value="255"/>
            </attribs>
         </obj>
         <nets>
            <net>
               <source obj="Value" outlet="out"/>
               <dest obj="Param Max__" inlet="val"/>
            </net>
            <net>
               <source obj="Param Max__" outlet="int"/>
               <dest obj="-_1" inlet="in1"/>
            </net>
            <net>
               <source obj="i_2" outlet="out"/>
               <dest obj="-_1" inlet="in2"/>
            </net>
            <net>
               <source obj="-_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <patcher type="patch/patcher" uuid="f138453b-19cc-4f97-9be2-93878b1f5492" name="K10" x="378" y="546">
      <params>
         <frac32.u.map name="Value" value="34.0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.10">
         <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Value" x="84" y="84">
            <params>
               <frac32.u.map name="value" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8" name="Param Max__" x="154" y="84">
            <params>
               <int32 name="max" value="511"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8">
               <sDescription>greater than</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>math.axh</helpPatch>
               <inlets>
                  <frac32.positive name="val"/>
               </inlets>
               <outlets>
                  <int32.positive name="int" description="integer positive result"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="max">
                     <MinValue i="0"/>
                     <MaxValue i="134217727"/>
                  </int32>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[


// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_max) {
	return (int32_t)(float)val * (float)out_max / 0x07FFFFFF;
};

]]></code.declaration>
               <code.krate><![CDATA[

outlet_int = range_pos(__USAT(inlet_val, 27), param_max);

]]></code.krate>
            </object>
         </patchobj>
         <obj type="math/-" uuid="1643d55e6e7ce1c995a5e66db9f54fd969e6c9b7" name="-_1" x="252" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="outlet_1" x="336" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_2" x="154" y="182">
            <params/>
            <attribs>
               <spinner attributeName="value" value="255"/>
            </attribs>
         </obj>
         <nets>
            <net>
               <source obj="Value" outlet="out"/>
               <dest obj="Param Max__" inlet="val"/>
            </net>
            <net>
               <source obj="Param Max__" outlet="int"/>
               <dest obj="-_1" inlet="in1"/>
            </net>
            <net>
               <source obj="i_2" outlet="out"/>
               <dest obj="-_1" inlet="in2"/>
            </net>
            <net>
               <source obj="-_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <nets>
      <net>
         <source obj="Volume" outlet="out"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="out_1" inlet="left"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="==_1" outlet="out"/>
         <dest obj="*_1" inlet="b"/>
      </net>
      <net>
         <source obj="Param Max_" outlet="int"/>
         <dest obj="==_1" inlet="synthPeriod"/>
      </net>
      <net>
         <source obj="Volume_" outlet="out"/>
         <dest obj="Param Max_" inlet="val"/>
      </net>
      <net>
         <source obj="i_1" outlet="out"/>
         <dest obj="==_1" inlet="synthEnergy"/>
      </net>
      <net>
         <source obj="K2" outlet="outlet_1"/>
         <dest obj="==_1" inlet="synthK2"/>
      </net>
      <net>
         <source obj="K1" outlet="outlet_1"/>
         <dest obj="==_1" inlet="synthK1"/>
      </net>
      <net>
         <source obj="K3" outlet="outlet_1"/>
         <dest obj="==_1" inlet="synthK3"/>
      </net>
      <net>
         <source obj="K4" outlet="outlet_1"/>
         <dest obj="==_1" inlet="synthK4"/>
      </net>
      <net>
         <source obj="K6" outlet="outlet_1"/>
         <dest obj="==_1" inlet="synthK6"/>
      </net>
      <net>
         <source obj="K5" outlet="outlet_1"/>
         <dest obj="==_1" inlet="synthK5"/>
      </net>
      <net>
         <source obj="K7" outlet="outlet_1"/>
         <dest obj="==_1" inlet="synthK7"/>
      </net>
      <net>
         <source obj="K8" outlet="outlet_1"/>
         <dest obj="==_1" inlet="synthK8"/>
      </net>
      <net>
         <source obj="K10" outlet="outlet_1"/>
         <dest obj="==_1" inlet="synthK10"/>
      </net>
      <net>
         <source obj="K9" outlet="outlet_1"/>
         <dest obj="==_1" inlet="synthK9"/>
      </net>
      <net>
         <source obj="==_1" outlet="debugINT"/>
         <dest obj="i_2" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>67</x>
      <y>35</y>
      <width>1141</width>
      <height>794</height>
   </windowPos>
</patch-1.0>