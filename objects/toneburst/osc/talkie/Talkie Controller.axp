<patch-1.0 appVersion="1.0.10">
   <obj type="env/ahd lin m" uuid="f9b46834ce96425064b4ed7f53ad8b91ea1ac0ef" name="ahd_1" x="770" y="28">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="-60.0"/>
      </params>
      <attribs/>
   </obj>
   <patcher type="patch/patcher" uuid="26a94ad6-74bc-4d8f-9dd8-cf210ccbd88b" name="Energy" x="294" y="70">
      <params>
         <frac32.u.map name="Value" value="64.0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.10">
         <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Value" x="70" y="84">
            <params>
               <frac32.u.map name="value" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8" name="Param Max__" x="154" y="84">
            <params>
               <int32 name="max" value="255"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8">
               <sDescription>greater than</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>math.axh</helpPatch>
               <inlets>
                  <frac32.positive name="val"/>
               </inlets>
               <outlets>
                  <int32.positive name="int" description="integer positive result"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="max">
                     <MinValue i="0"/>
                     <MaxValue i="134217727"/>
                  </int32>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[


// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_max) {
	return (int32_t)(float)val * (float)out_max / 0x07FFFFFF;
};

]]></code.declaration>
               <code.krate><![CDATA[

outlet_int = range_pos(__USAT(inlet_val, 27), param_max);

]]></code.krate>
            </object>
         </patchobj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="outlet_1" x="252" y="84">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="Value" outlet="out"/>
               <dest obj="Param Max__" inlet="val"/>
            </net>
            <net>
               <source obj="Param Max__" outlet="int"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Volume" x="882" y="84">
      <params>
         <frac32.u.map name="value" value="51.0"/>
      </params>
      <attribs/>
   </obj>
   <patcher type="patch/patcher" uuid="32029335-afc1-4154-8467-cae613ff25f1" name="Period" x="140" y="126">
      <params>
         <frac32.u.map name="Value" value="64.0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.10">
         <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Value" x="70" y="84">
            <params>
               <frac32.u.map name="value" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8" name="Param Max__" x="154" y="84">
            <params>
               <int32 name="max" value="51"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="96da9a47-7d67-452e-96ad-ecfa2ac1c0f8">
               <sDescription>greater than</sDescription>
               <author>toneburst</author>
               <license>BSD</license>
               <helpPatch>math.axh</helpPatch>
               <inlets>
                  <frac32.positive name="val"/>
               </inlets>
               <outlets>
                  <int32.positive name="int" description="integer positive result"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="max">
                     <MinValue i="0"/>
                     <MaxValue i="134217727"/>
                  </int32>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[


// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_max) {
	return (int32_t)(float)val * (float)out_max / 0x07FFFFFF;
};

]]></code.declaration>
               <code.krate><![CDATA[

outlet_int = range_pos(__USAT(inlet_val, 27), param_max);

]]></code.krate>
            </object>
         </patchobj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="outlet_1" x="252" y="84">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="Value" outlet="out"/>
               <dest obj="Param Max__" inlet="val"/>
            </net>
            <net>
               <source obj="Param Max__" outlet="int"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="unvoiced" x="420" y="126">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="2e3b980b-4415-428f-b6ca-29f283183066" name="Talkie Filters" x="770" y="182">
      <params>
         <frac32.u.map name="srate" value="32.0"/>
         <frac32.u.map name="crush" value="0.0"/>
         <frac32.u.map name="smear" value="58.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="2e3b980b-4415-428f-b6ca-29f283183066">
         <sDescription>Talkie Synth</sDescription>
         <author>toneburst</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32buffer.bipolar name="excitation" description="waveform input"/>
            <int32.bipolar name="synthK1" description="synth coefficient K1"/>
            <int32.bipolar name="synthK2" description="synth coefficient K2"/>
            <int32.bipolar name="synthK3" description="synth coefficient K3"/>
            <int32.bipolar name="synthK4" description="synth coefficient K4"/>
            <int32.bipolar name="synthK5" description="synth coefficient K5"/>
            <int32.bipolar name="synthK6" description="synth coefficient K6"/>
            <int32.bipolar name="synthK7" description="synth coefficient K7"/>
            <int32.bipolar name="synthK8" description="synth coefficient K8"/>
            <int32.bipolar name="synthK9" description="synth coefficient K9"/>
            <int32.bipolar name="synthK10" description="synth coefficient K10"/>
            <frac32.positive name="srate" description="octave transpose"/>
            <frac32.positive name="crush" description="bit-crush"/>
            <frac32.positive name="smear" description="filter smear"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="voice"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="srate"/>
            <frac32.u.map name="crush" description="bit-crush"/>
            <frac32.u.map name="smear" description="harmonic smear"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[

///////////////////
///////////////////
//// VARIABLES ////
///////////////////
///////////////////

///////////////
// Constants //
///////////////

const uint8_t tmsPeriod[0x40] = {0x00,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2D,0x2F,0x31,0x33,0x35,0x36,0x39,0x3B,0x3D,0x3F,0x42,0x45,0x47,0x49,0x4D,0x4F,0x51,0x55,0x57,0x5C,0x5F,0x63,0x66,0x6A,0x6E,0x73,0x77,0x7B,0x80,0x85,0x8A,0x8F,0x95,0x9A,0xA0};

///////////////////////////
// Synth State Variables //
///////////////////////////

// Synth coefficients
int16_t synthK1,synthK2;
int8_t synthK3,synthK4,synthK5,synthK6,synthK7,synthK8,synthK9,synthK10;

// Slew-states
int32_t energySlewState;
int32_t synthK1SlewState,synthK2SlewState;
int32_t synthK3SlewState,synthK4SlewState,synthK5SlewState,synthK6SlewState,synthK7SlewState,synthK8SlewState,synthK9SlewState,synthK10SlewState;

// Synth period (no. 8kHz cycles)
uint8_t synthPeriod;

// Synth volume
uint16_t synthEnergy;

// Frame frequency
uint8_t periodCounter;

//Lattice filter reverse path state
int16_t x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10;

///////////////////
// Params/Inlets //
///////////////////

uint32_t srate;
uint32_t crush;
uint32_t smear;

/////////////
// Samples //
/////////////

int8_t excitationSource;
int32_t sample;

//////////////
// Counters //
//////////////

uint8_t renderCounter;
uint8_t renderInterval;

///////////////////
///////////////////
//// FUNCTIONS ////
///////////////////
///////////////////


///////////////////
// Render Filter //
///////////////////

int8_t tk_renderFilters() {
	int16_t u0,u1,u2,u3,u4,u5,u6,u7,u8,u9,u10;

	// Mix voiced/unvoiced source
	u10 = excitationSource;
    	
    	// Lattice filter forward path
    	u9 = u10 - (((int16_t)synthK10*x9) >> 7);
	u8 = u9  - (((int16_t)synthK9*x8) >> 7);
	u7 = u8  - (((int16_t)synthK8*x7) >> 7);
	u6 = u7  - (((int16_t)synthK7*x6) >> 7);
	u5 = u6  - (((int16_t)synthK6*x5) >> 7);
	u4 = u5  - (((int16_t)synthK5*x4) >> 7);
	u3 = u4  - (((int16_t)synthK4*x3) >> 7);
	u2 = u3  - (((int16_t)synthK3*x2) >> 7);
	u1 = u2  - (((int32_t)synthK2*x1) >> 15);
	u0 = u1  - (((int32_t)synthK1*x0) >> 15);
	
	// Output clamp to 9 bits (-512 to 511)
	u0 = __SSAT(u0, 9);

	// Lattice filter reverse path
	x9 = x8 + (((int16_t)synthK9*u8) >> 7);
	x8 = x7 + (((int16_t)synthK8*u7) >> 7);
	x7 = x6 + (((int16_t)synthK7*u6) >> 7);
	x6 = x5 + (((int16_t)synthK6*u5) >> 7);
	x5 = x4 + (((int16_t)synthK5*u4) >> 7);
	x4 = x3 + (((int16_t)synthK4*u3) >> 7);
	x3 = x2 + (((int16_t)synthK3*u2) >> 7);
	x2 = x1 + (((int32_t)synthK2*u1) >> 15);
	x1 = x0 + (((int32_t)synthK1*u0) >> 15);
	x0 = u0;

	// Bit-shift return value to -255 to 254 range
	return u0 >> 1;
}

///////////////////////
// Utility Functions //
///////////////////////

// Scale input to range out_min > out_max
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_min, int32_t out_max) {
	float x = (float)val;
	float outMin = (float)out_min;
	float outMax = (float)out_max;
	return (int32_t)(x * (outMax - outMin) / 0x07FFFFFF + outMin);
};

// 8-Bit clamp val to range min > max
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int8_t clamp8(int8_t val, int8_t min, int8_t max) {
	return (val <= min) ? min : (val >= max) ? max : val;
}

// 16-bit xfade (adapted from Factory xfade object)
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int16_t xfade16(int16_t a, int16_t b, uint16_t x) {
	int16_t ccompl = (1 << 15) - x;
	int32_t result = (int32_t)b * x;
	result += (int32_t)a * ccompl;
	return result >> 16;
}

// Slew function, with pointer to state variable
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t slew(int32_t target, int32_t *state, int32_t slewTime, bool enable) {
	if (enable && slewTime > 0) {
		*state = ___SMMLA(*state - target, (-1 << 26) + (slewTime >> 1), *state);
		return *state;
	} else {
		*state = target;
		return target;
	};
};

// Exponential interpolation
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t interpExp(int32_t val) {
	// Transform inlet val to float in 0 - 1 range
	float inf = val * (float)(1.0f / (1 << 27));
	float curve = inf*inf;
	return (int32_t)(curve * (float)(1 << 27));
}

]]></code.declaration>
         <code.init><![CDATA[

// Counters (count S-Rate cycles)
renderCounter = 0;
// S-Rate cycle periods for sample-calculate function
renderInterval = 6;

// External audio input sample
excitationSource = 0;

// Calculated output sample value
sample = 0;

// Inlets/Param values
srate = 0;
crush = 9;
smear = 0;

]]></code.init>
         <code.krate><![CDATA[

// Synth coefficients, with slew
synthK1  = slew(__SSAT(inlet_synthK1, 16) <<16, &synthK1SlewState, smear, true)>>16;
synthK2  = slew(__SSAT(inlet_synthK2, 16) <<16, &synthK2SlewState, smear, true)>>16;
synthK3  = slew(__SSAT(inlet_synthK3,  8) <<24, &synthK3SlewState, smear, true)>>24;
synthK4  = slew(__SSAT(inlet_synthK4,  8) <<24, &synthK4SlewState, smear, true)>>24;
synthK5  = slew(__SSAT(inlet_synthK5,  8) <<24, &synthK5SlewState, smear, true)>>24;
synthK6  = slew(__SSAT(inlet_synthK6,  8) <<24, &synthK6SlewState, smear, true)>>24;
synthK7  = slew(__SSAT(inlet_synthK7,  8) <<24, &synthK7SlewState, smear, true)>>24;
synthK8  = slew(__SSAT(inlet_synthK8,  8) <<24, &synthK8SlewState, smear, true)>>24;
synthK9  = slew(__SSAT(inlet_synthK9,  8) <<24, &synthK9SlewState, smear, true)>>24;
synthK10 = slew(__SSAT(inlet_synthK10, 8) <<24, &synthK10SlewState,smear, true)>>24;

///////////////////
// Params/Inlets //
///////////////////

// Bitcrush
crush = range_pos(__USAT(param_crush + inlet_crush, 27), 0, 7);
// Smear
smear = __USAT(param_smear + inlet_smear, 27);
// Sample-rate
srate = range_pos(__USAT(param_srate + inlet_srate, 27), 0, 2);

// Switch sample-rate low/high/mid
switch(srate) {
	case 0  :
		renderInterval = 12;
		break;
	case 2  :
		renderInterval = 3;
		break;
	default :
		renderInterval = 6;
}

/////////////////
// Render Loop //
/////////////////

for(uint8_t j = 0; j < BUFSIZE; j++) {

	///////////////////
	// Render Sample //
	///////////////////
	
	if(renderCounter == 0) {
		// Capture external ocsillator input (downsampled to 8 bit)
		excitationSource = inlet_excitation[j] >> 19;
		// Render voice samples
		sample = tk_renderFilters();
		// Bit-reduction
		if(crush > 0)
			sample = (sample >> crush) << crush;
	}
	
	// Increment render counter
	renderCounter = (renderCounter < (renderInterval - 1)) ? renderCounter + 1 : 0;
	
	// Write samples to output buffer (27 bits)
	outlet_voice[j] = sample << 19;
}

]]></code.krate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="896" y="182">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="3ac307b9f782049739ed62504081b96d580ea336" name="*_1" x="966" y="182">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="1036" y="182">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="2e3b980b-4415-428f-b6ca-29f283183066" name="Talkie Voiced Source" x="238" y="196">
      <params>
         <frac32.u.map name="wave" value="0.0"/>
         <frac32.u.map name="oct" value="32.0"/>
         <bool32.tgl name="pitch" value="1"/>
         <int32 name="pmode" value="2"/>
         <bool32.tgl name="glide" value="0"/>
         <frac32.u.map name="gliderate" value="46.0"/>
         <frac32.u.map name="crush" value="64.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="2e3b980b-4415-428f-b6ca-29f283183066">
         <sDescription>Talkie Synth</sDescription>
         <author>toneburst</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <int32.bipolar name="synthPeriod" description="period (from Talkie Controller object)"/>
            <frac32.positive name="oct" description="octave transpose"/>
            <bool32 name="pitch" description="while true, override pitch set with &apos;synthPeriod&apos; inlet with MIDI note value at &apos;note&apos; inlet"/>
            <frac32.bipolar name="note" description="midi note in"/>
            <frac32.positive name="crush" description="bit-crush"/>
            <bool32 name="glide" description="glide enable/disable"/>
            <frac32.positive name="gliderate" description="glide rate (fast to slow)"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="out"/>
            <frac32.bipolar name="debug"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="wave" description="select &apos;chirp&apos; waveform"/>
            <frac32.u.map name="oct" description="octave"/>
            <bool32.tgl name="pitch" description="override pitch set by &apos;synthEnergy&apos; inlet with value at inlet &apos;note&apos; when true"/>
            <int32 name="pmode" description="pitch-shift mode when &apos;pitch&apos; inlet true">
               <MinValue i="1"/>
               <MaxValue i="2"/>
            </int32>
            <bool32.tgl name="glide"/>
            <frac32.u.map name="gliderate" description="glissando"/>
            <frac32.u.map name="crush" description="bit-crush"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[

///////////////////
///////////////////
//// VARIABLES ////
///////////////////
///////////////////

///////////////
// Constants //
///////////////

const uint8_t tmsPeriod[64] = {
	0x00,0x10,0x11,0x12,0x13,0x14,0x15,0x16,\
	0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,\
	0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,\
	0x27,0x28,0x29,0x2A,0x2B,0x2D,0x2F,0x31,\
	0x33,0x35,0x36,0x39,0x3B,0x3D,0x3F,0x42,\
	0x45,0x47,0x49,0x4D,0x4F,0x51,0x55,0x57,\
	0x5C,0x5F,0x63,0x66,0x6A,0x6E,0x73,0x77,\
	0x7B,0x80,0x85,0x8A,0x8F,0x95,0x9A,0xA0
};

#define CHIRP_SIZE 52
const int8_t chirpTables[4][CHIRP_SIZE] = {
	// TI 0280 PATENT CHIRP
	{
		0x00,0x2a,0xd4,0x32,0xb2,0x12,0x25,0x14,\
		0x02,0xe1,0xc5,0x02,0x5f,0x5a,0x05,0x0f,\
		0x26,0xfc,0xa5,0xa5,0xd6,0xdd,0xdc,0xfc,\
		0x25,0x2b,0x22,0x21,0x0f,0xff,0xf8,0xee,\
		0xed,0xef,0xf7,0xf6,0xfa,0x00,0x03,0x02,\
		0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
		0x00,0x00,0x00,0x00
	},
	// TI 2802 CHIRP
	{
		0x00,0xa5,0xbd,0xee,0x34,0x73,0x7e,0x3d,\
		0xe8,0xea,0x34,0x24,0xd1,0x01,0x13,0xc3,\
		0x0c,0xd2,0xe7,0xdd,0xd9,0x00,0x00,0x00,\
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
		0x00,0x00,0x00,0x00
	}
	// TI 2801 CHIRP
	{
		0x00,0x2b,0xd4,0x33,0xb3,0x12,0x25,0x14,\
		0x02,0xe2,0xc6,0x03,0x60,0x5b,0x05,0x0f,\
		0x26,0xfc,0xa6,0xa5,0xd6,0xdd,0xdd,0xfd,\
		0x25,0x2b,0x23,0x22,0x0f,0xff,0xf8,0xef,\
		0xed,0xef,0xf7,0xf7,0xfa,0x01,0x04,0x03,\
		0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
		0x00,0x00,0x00,0x00
	},
	// TI LATER CHIRP
	{
		0x00,0x03,0x0f,0x28,0x4c,0x6c,0x71,0x50,\
		0x25,0x26,0x4c,0x44,0x1a,0x32,0x3b,0x13,\
		0x37,0x1a,0x25,0x1f,0x1d,0x00,0x00,0x00,\
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
		0x00,0x00,0x00,0x00
	}
};

// 8000Hz cycle counts to MIDI notes (error increases with frequency)
// MIDI Notes C2 (MIDI note #36) - C4 (#60)
const int8_t midiNotes[25] = {
	122,116,109,103,97,92,87,82,77,73,69,65,61,58,55,51,49,46,43,41,38,36,34,32,31
};
// Transpose table for transpose mode 1
const int8_t midiTranspose[25] = {
	61,55,48,42,36,31,26,21,16,12,8,4,0,-3,-6,-10,-12,-15,-18,-20,-23,-25,-27,-29,-30
};

///////////////////////////
// Synth State Variables //
///////////////////////////

// Synth period (no. 8kHz cycles)
uint8_t synthPeriod;
// Synth volume
uint16_t synthEnergy;
// Frame frequency
uint8_t periodCounter;

/////////////////
// Slew-states //
/////////////////

int32_t energySlewState;
int32_t oscPeriodSlewState;

///////////////////
// Params/Inlets //
///////////////////

bool voiced;
uint8_t waveIndex;
uint32_t octave;
uint8_t oscPeriod;
uint32_t crush;
uint32_t glide;
uint8_t chirp;
int8_t midiNote;

/////////////
// Samples //
/////////////

int32_t sample;
int8_t extOsc;

//////////////
// Counters //
//////////////

uint8_t renderCounter;
uint8_t renderInterval;
int8_t midiPeriod;

///////////////////
///////////////////
//// FUNCTIONS ////
///////////////////
///////////////////

//////////////////
// Render Audio //
//////////////////

int8_t tk_renderVoiced() {
	// Generate voiced source
	static int16_t voicedSource;

	if (periodCounter < oscPeriod) {
		periodCounter++;
	} else {
		periodCounter = 0;
	}
	if (periodCounter < CHIRP_SIZE) {
		voicedSource = chirpTables[waveIndex][periodCounter];
	} else {
		voicedSource = 0;
	}
	return voicedSource;
}

///////////////////////
// Utility Functions //
///////////////////////

// Scale input to range out_min > out_max
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_min, int32_t out_max) {
	float x = (float)val;
	float outMin = (float)out_min;
	float outMax = (float)out_max;
	return (int32_t)(x * (outMax - outMin) / 0x07FFFFFF + outMin);
}

// 8-Bit clamp val to range min > max
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int8_t clamp8(int8_t val, int8_t min, int8_t max) {
	return (val <= min) ? min : (val >= max) ? max : val;
}

// Slew function, with pointer to state variable
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t slew(int32_t target, int32_t *state, int32_t slewTime, bool enable) {
	if (enable && slewTime > 0) {
		*state = ___SMMLA(*state - target, (-1 << 26) + (slewTime >> 1), *state);
		return *state;
	} else {
		*state = target;
		return target;
	}
}

// 16-bit xfade (adapted from Factory xfade object)
/*__attribute__ ( ( always_inline ) ) __STATIC_INLINE int16_t xfade16(int16_t a, int16_t b, uint16_t x) {
	int16_t ccompl = (1 << 15) - x;
	int32_t result = (int32_t)b * x;
	result += (int32_t)a * ccompl;
	return result >> 16;
}*/

]]></code.declaration>
         <code.init><![CDATA[

// Counters (count S-Rate cycles)
renderCounter = 0;
// S-Rate cycle periods for sample-calculate function
renderInterval = 6;

// Calculated output sample value
sample = 0;

// Inlets/Param values
waveIndex = 0;
octave = 0;
oscPeriod = 0;
crush = 9;
glide = 0;
chirp = 0;

]]></code.init>
         <code.krate><![CDATA[

// Synth period, with slew
synthPeriod = tmsPeriod[__USAT(inlet_synthPeriod, 8)];

///////////////////
// Params/Inlets //
///////////////////

// Wave index 0 - 3
waveIndex = param_wave >> 25;

// Bitcrush
crush = range_pos(__USAT(param_crush + inlet_crush, 27), 1, 7);
// Glissando
glide = (param_glide || inlet_glide) ? __USAT(param_gliderate + inlet_gliderate, 27) : 0;
// Octave
octave = range_pos(__USAT(param_oct + inlet_oct, 27), 0, 2);

// Transpose/set period of voiced source
// if boolean inlet 'pitch' true
if(inlet_pitch || param_pitch) {
	// MIDI note number, clamped to range, scaled
	midiNote = clamp8(inlet_note >> 21, -40, -16) + 40;
	// Mode 1: transpose
	if(param_pmode == 1) {
		oscPeriod = synthPeriod + midiTranspose[midiNote];		
	// Mode 2: set period from Note inlet (Vocoder mode)
	} else if(param_pmode == 2) {
		oscPeriod = midiNotes[midiNote];
	}
} else {
	oscPeriod = synthPeriod;
}
oscPeriod = slew(oscPeriod << 24, &oscPeriodSlewState, glide, TRUE) >> 24;

// Switch sample-rate for low/high/mid octaves
switch(octave) {
	case 0  :
		renderInterval = 12;
		break;
	case 2  :
		renderInterval = 3;
		break;
	default :
		renderInterval = 6;
}

/////////////////
// Render Loop //
/////////////////

for(uint8_t j = 0; j < BUFSIZE; j++) {

	///////////////////
	// Render Sample //
	///////////////////
	
	if(renderCounter == 0) {
		sample = (tk_renderVoiced() >> crush) << crush;
	}
	
	// Increment render counter
	renderCounter = (renderCounter < (renderInterval - 1)) ? renderCounter + 1 : 0;
	
	// Write samples to output buffer (27 bits)
	outlet_out[j] = sample << 19;
}

]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c5470ff-da3f-4dc8-9848-fbe7ff65bd4e" name="Talkie Unvoiced Source" x="392" y="196">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
         <frac32.u.map name="octave" value="32.0"/>
         <bool32.tgl name="fixed" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0c5470ff-da3f-4dc8-9848-fbe7ff65bd4e">
         <sDescription>hexadecimal display (for developers)</sDescription>
         <author>toneburst</author>
         <license>BSD</license>
         <helpPatch>disp.axh</helpPatch>
         <inlets>
            <frac32.bipolar name="pitch" description="noise pitch"/>
            <frac32.positive name="octave" description="noise octave-shift"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="noise" description="noise"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch" description="pitch input"/>
            <frac32.u.map name="octave" description="noise octave"/>
            <bool32.tgl name="fixed" description="fixed 8kHz pitch"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[

// Phase-counter
int32_t osc_p;
// Cycle counter
int8_t rcount;
// Current output sample value
int32_t sample;

////////////////////////
// LPC Noise Function //
////////////////////////

int32_t unvoicedSource;
uint16_t synthRand = 1;

int32_t tk_renderUnvoiced() {
	synthRand = (synthRand >> 1) ^ ((synthRand & 1) ? 0xB800 : 0);
	unvoicedSource = (synthRand & 1) ? 1 << 27 : -1 << 27;
	return unvoicedSource;
}

]]></code.declaration>
         <code.init><![CDATA[

osc_p = 0;
rcount = 0;

]]></code.init>
         <code.krate><![CDATA[


// Calculate phase-increment
uint32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,freq);
// Calculate octave multiplier for phase-increment
uint8_t multiplier = __USAT(param_octave + inlet_octave, 27) >> 23;
// Ensure multiplier has minimum value of 1
multiplier = (multiplier == 0) ? 1 : multiplier; 
// Multiply phase-increment by octave multiplier
// (phase will wrap at 32 bits)
freq *= multiplier;

/////////////////
// Render Loop //
/////////////////

// Loop through outlet buffer
for(uint8_t j = 0; j < BUFSIZE; j++) {
	// If 'fixed' bool set, render noise at fixed 8kHz
	if(param_fixed) {
		if(rcount == 0) {
			sample = tk_renderUnvoiced();
		}
	// Else render noise sample once per phase cycle
	} else {
		if(osc_p <= freq) {
			// Update sample
			sample = tk_renderUnvoiced();			
		}
	}
	// Increment phase-counter
	osc_p += freq;
	// Incremement cycle counter
	rcount = (rcount == 5) ? 0 : rcount + 1;
	// Set noise output buffer at sample j
	outlet_noise[j] = sample;
}

]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="06902663-1848-4c47-84be-beae9351032a" name="Talkie Mixer" x="504" y="196">
      <params>
         <bool32.tgl name="unvoiced" value="0"/>
         <frac32.u.map name="bias" value="0.0"/>
         <frac32.u.map name="smear" value="46.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="06902663-1848-4c47-84be-beae9351032a">
         <sDescription>crossfade between two inputs</sDescription>
         <author>toneburst</author>
         <license>BSD</license>
         <inlets>
            <int32.positive name="synthEnergy" description="energy (volume)"/>
            <bool32 name="unvoiced" description="switch between voiced and unvoiced waves"/>
            <frac32buffer name="voicedWave" description="voiced wave"/>
            <frac32buffer name="unvoicedWave" description="unvoiced wave"/>
            <frac32.positive name="bias" description="mix unvoiced (noise) into voiced source"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="wave"/>
         </outlets>
         <displays/>
         <params>
            <bool32.tgl name="unvoiced" description="unvoiced switch"/>
            <frac32.u.map name="bias" description="mix unvoiced (noise) into voiced source"/>
            <frac32.u.map name="smear" description="apply slew to voiced/unvoiced mix"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[

int32_t mix;
int32_t mixSlewState;

///////////////////////
// Utility Functions //
///////////////////////

// Slew function, with pointer to state variable
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t slew(int32_t target, int32_t *state, int32_t slewTime, bool enable) {
	if (enable && slewTime > 0) {
		*state = ___SMMLA(*state - target, (-1 << 26) + (slewTime >> 1), *state);
		return *state;
	} else {
		*state = target;
		return target;
	};
};

// Exponential interpolation
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t interpExp(int32_t val) {
	// Transform inlet val to float in 0 - 1 range
	float inf = val * (float)(1.0f / (1 << 27));
	float curve = inf*inf;
	return (int32_t)(curve * (float)(1 << 27));
}

]]></code.declaration>
         <code.init><![CDATA[

mix = 0;
mixSlewState = 0;

]]></code.init>
         <code.krate><![CDATA[

// Set mix to max if unvoiced param or inlet set true, else set to values from bias param/inlet (saturated to 27 bits)
mix = (inlet_unvoiced || param_unvoiced) ? 0x07ffffff : interpExp(__USAT(param_bias + inlet_bias, 27));
// Apply slew to mix value
mix = slew(mix, &mixSlewState, param_smear, true);
// Inverted mix value
int32_t ccompl = ((128 << 20) - mix);


//voicedSource = ((chirpTables[waveIndex][periodCounter]) * (uint32_t) synthEnergy) >> 8;


]]></code.krate>
         <code.srate><![CDATA[

// Mix voiced and unvoiced inlets (code from Factory mix/xfade object)
int64_t a = (int64_t)inlet_unvoicedWave * mix;
a += (int64_t)inlet_voicedWave * ccompl;
a *= inlet_synthEnergy;
outlet_wave = a >> 35;

]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="325e427b-0c89-4479-8959-cce80a02a21c" name="Talkie Filter Controller" x="644" y="196">
      <params>
         <frac32.u.map name="synthK1" value="43.5"/>
         <frac32.u.map name="synthK2" value="8.5"/>
         <frac32.u.map name="synthK3" value="38.5"/>
         <frac32.u.map name="synthK4" value="15.0"/>
         <frac32.u.map name="synthK5" value="44.5"/>
         <frac32.u.map name="synthK6" value="34.0"/>
         <frac32.u.map name="synthK7" value="39.5"/>
         <frac32.u.map name="synthK8" value="21.0"/>
         <frac32.u.map name="synthK9" value="30.0"/>
         <frac32.u.map name="synthK10" value="64.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="325e427b-0c89-4479-8959-cce80a02a21c">
         <sDescription>crossfade between two inputs</sDescription>
         <author>toneburst</author>
         <license>BSD</license>
         <inlets/>
         <outlets>
            <int32.bipolar name="synthK1"/>
            <int32.bipolar name="synthK2"/>
            <int32.bipolar name="synthK3"/>
            <int32.bipolar name="synthK4"/>
            <int32.bipolar name="synthK5"/>
            <int32.bipolar name="synthK6"/>
            <int32.bipolar name="synthK7"/>
            <int32.bipolar name="synthK8"/>
            <int32.bipolar name="synthK9"/>
            <int32.bipolar name="synthK10"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="synthK1"/>
            <frac32.u.map name="synthK2"/>
            <frac32.u.map name="synthK3"/>
            <frac32.u.map name="synthK4"/>
            <frac32.u.map name="synthK5"/>
            <frac32.u.map name="synthK6"/>
            <frac32.u.map name="synthK7"/>
            <frac32.u.map name="synthK8"/>
            <frac32.u.map name="synthK9"/>
            <frac32.u.map name="synthK10"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[

///////////////////////////////
// Filter Coefficient Tables //
///////////////////////////////

const int16_t tmsK1[0x20]     = {0x82C0,0x8380,0x83C0,0x8440,0x84C0,0x8540,0x8600,0x8780,0x8880,0x8980,0x8AC0,0x8C00,0x8D40,0x8F00,0x90C0,0x92C0,0x9900,0xA140,0xAB80,0xB840,0xC740,0xD8C0,0xEBC0,0x0000,0x1440,0x2740,0x38C0,0x47C0,0x5480,0x5EC0,0x6700,0x6D40};
const int16_t tmsK2[0x20]     = {0xAE00,0xB480,0xBB80,0xC340,0xCB80,0xD440,0xDDC0,0xE780,0xF180,0xFBC0,0x0600,0x1040,0x1A40,0x2400,0x2D40,0x3600,0x3E40,0x45C0,0x4CC0,0x5300,0x5880,0x5DC0,0x6240,0x6640,0x69C0,0x6CC0,0x6F80,0x71C0,0x73C0,0x7580,0x7700,0x7E80};
const int8_t tmsK3[0x10]      = {0x92,0x9F,0xAD,0xBA,0xC8,0xD5,0xE3,0xF0,0xFE,0x0B,0x19,0x26,0x34,0x41,0x4F,0x5C};
const int8_t tmsK4[0x10]      = {0xAE,0xBC,0xCA,0xD8,0xE6,0xF4,0x01,0x0F,0x1D,0x2B,0x39,0x47,0x55,0x63,0x71,0x7E};
const int8_t tmsK5[0x10]      = {0xAE,0xBA,0xC5,0xD1,0xDD,0xE8,0xF4,0xFF,0x0B,0x17,0x22,0x2E,0x39,0x45,0x51,0x5C};
const int8_t tmsK6[0x10]      = {0xC0,0xCB,0xD6,0xE1,0xEC,0xF7,0x03,0x0E,0x19,0x24,0x2F,0x3A,0x45,0x50,0x5B,0x66};
const int8_t tmsK7[0x10]      = {0xB3,0xBF,0xCB,0xD7,0xE3,0xEF,0xFB,0x07,0x13,0x1F,0x2B,0x37,0x43,0x4F,0x5A,0x66};
const int8_t tmsK8[0x08]      = {0xC0,0xD8,0xF0,0x07,0x1F,0x37,0x4F,0x66};
const int8_t tmsK9[0x08]      = {0xC0,0xD4,0xE8,0xFC,0x10,0x25,0x39,0x4D};
const int8_t tmsK10[0x08]     = {0xCD,0xDF,0xF1,0x04,0x16,0x20,0x3B,0x4D};

]]></code.declaration>
         <code.krate><![CDATA[

// Scale controls to coefficient table indices
// and set outlets
outlet_synthK1  =  tmsK1[param_synthK1  >> 22];
outlet_synthK2  =  tmsK2[param_synthK2  >> 22];
outlet_synthK3  =  tmsK3[param_synthK3  >> 23];
outlet_synthK4  =  tmsK4[param_synthK4  >> 23];
outlet_synthK5  =  tmsK5[param_synthK5  >> 23];
outlet_synthK6  =  tmsK6[param_synthK6  >> 23];
outlet_synthK7  =  tmsK7[param_synthK7  >> 23];
outlet_synthK8  =  tmsK8[param_synthK8  >> 24];
outlet_synthK9  =  tmsK9[param_synthK9  >> 24];
outlet_synthK10 = tmsK10[param_synthK10 >> 24];

]]></code.krate>
      </object>
   </patchobj>
   <obj type="midi/in/keyb mod" uuid="abcd509d15e7d13d5381203fd2b4d0ac6fe57bb3" name="keyb_1" x="126" y="252">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="Volume" outlet="out"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="out_1" inlet="left"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="note"/>
         <dest obj="Talkie Unvoiced Source" inlet="pitch"/>
         <dest obj="Talkie Voiced Source" inlet="note"/>
      </net>
      <net>
         <source obj="Period" outlet="outlet_1"/>
         <dest obj="Talkie Voiced Source" inlet="synthPeriod"/>
      </net>
      <net>
         <source obj="Energy" outlet="outlet_1"/>
         <dest obj="Talkie Mixer" inlet="synthEnergy"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="*_1" inlet="b"/>
      </net>
      <net>
         <source obj="ahd_1" outlet="env"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="gate"/>
         <dest obj="ahd_1" inlet="trig"/>
      </net>
      <net>
         <source obj="Talkie Unvoiced Source" outlet="noise"/>
         <dest obj="Talkie Mixer" inlet="unvoicedWave"/>
      </net>
      <net>
         <source obj="Talkie Voiced Source" outlet="out"/>
         <dest obj="Talkie Mixer" inlet="voicedWave"/>
      </net>
      <net>
         <source obj="unvoiced" outlet="o"/>
         <dest obj="Talkie Mixer" inlet="unvoiced"/>
      </net>
      <net>
         <source obj="Talkie Mixer" outlet="wave"/>
         <dest obj="Talkie Filters" inlet="excitation"/>
      </net>
      <net>
         <source obj="Talkie Filters" outlet="voice"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="Talkie Filter Controller" outlet="synthK1"/>
         <dest obj="Talkie Filters" inlet="synthK1"/>
      </net>
      <net>
         <source obj="Talkie Filter Controller" outlet="synthK2"/>
         <dest obj="Talkie Filters" inlet="synthK2"/>
      </net>
      <net>
         <source obj="Talkie Filter Controller" outlet="synthK3"/>
         <dest obj="Talkie Filters" inlet="synthK3"/>
      </net>
      <net>
         <source obj="Talkie Filter Controller" outlet="synthK4"/>
         <dest obj="Talkie Filters" inlet="synthK4"/>
      </net>
      <net>
         <source obj="Talkie Filter Controller" outlet="synthK5"/>
         <dest obj="Talkie Filters" inlet="synthK5"/>
      </net>
      <net>
         <source obj="Talkie Filter Controller" outlet="synthK6"/>
         <dest obj="Talkie Filters" inlet="synthK6"/>
      </net>
      <net>
         <source obj="Talkie Filter Controller" outlet="synthK7"/>
         <dest obj="Talkie Filters" inlet="synthK7"/>
      </net>
      <net>
         <source obj="Talkie Filter Controller" outlet="synthK8"/>
         <dest obj="Talkie Filters" inlet="synthK8"/>
      </net>
      <net>
         <source obj="Talkie Filter Controller" outlet="synthK9"/>
         <dest obj="Talkie Filters" inlet="synthK9"/>
      </net>
      <net>
         <source obj="Talkie Filter Controller" outlet="synthK10"/>
         <dest obj="Talkie Filters" inlet="synthK10"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>65</x>
      <y>23</y>
      <width>1240</width>
      <height>852</height>
   </windowPos>
</patch-1.0>