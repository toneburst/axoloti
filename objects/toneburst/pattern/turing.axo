<objdefs appVersion="1.0.8">
   <obj.normal id="turing" uuid="f4aa3eb926415b6fc796e993dde554a273a022ac">
      <sDescription>Shift-register pattern generator, based on Music Thing Turing machine Eurorack module</sDescription>
      <author>toneburst</author>
      <license>BSD</license>
      <helpPatch>nmpgen3.axh</helpPatch>
      <inlets>
         <bool32.rising name="trig" description="Trigger Pulse"/>
         <bool32.rising name="r" description="Reset Pulse"/>
         <bool32.rising name="l" description="Load New Seed Pulse"/>
         <frac32.bipolar name="n" description="Noise"/>
      </inlets>
      <outlets>
         <frac32.bipolar name="pattern" description="Pattern Out (Bipolar)"/>
         <bool32 name="flip" description="Trigger Pattern (Bool)"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="seed" description="Seed Number"/>
         <frac32.s.map name="rand" description="Randomness"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[

int init = 1;
int ntrig = 0;
int rtrig = 0;
int ltrig = 0;

uint8_t counter = 0;
//int32_t length = 8;
//int32_t offset = 0;
uint16_t baseval = 5067;
uint16_t workingval = baseval;
int32_t outval = 0;
bool flippulse = false;

///////////////////////
// Utility Functions //
///////////////////////

uint16_t rotate_right(uint16_t val, uint8_t shift) {
	return (val << shift) | (val >> (16 - shift));
}

uint16_t rotate_left(uint16_t val, uint8_t shift) {
	return (val << (16 - shift)) | (val >> shift);
}

// http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c

uint16_t togglefirstbit(uint16_t val) {
	return val ^= 1 << 0;
}

uint16_t togglelastbit(uint16_t val) {
	return val ^= 1 << 15;
}

uint16_t getleftbyte(uint16_t word) {
    return word >> 8;
}

uint16_t getrightbyte(uint16_t word) {
    return (word << 8) >> 8;
}


           ]]></code.declaration>
      <code.krate><![CDATA[

///////////////////////////////
// Loop Running For 1st Time //
///////////////////////////////

if (init == 1) {

	init = 0;
}

/////////////////////////////
// Reset Input Rising Edge //
/////////////////////////////

if ((inlet_r > 0) && !rtrig) {
	rtrig = 1;
	counter = 0;
} else if (!(inlet_r > 0)) {
	rtrig = 0;
}

///////////////////////////////
// Trigger Input Rising Edge //
///////////////////////////////

if ((inlet_trig > 0) && !ntrig) {

	// Set output value until next trigger
	workingval = rotate_right(workingval, 1);

    if (inlet_n < param_rand) {
        workingval = togglelastbit(workingval);
        flippulse = true;
    }

    outval = (workingval >> 8) - 128;

	ntrig = 1;

	// Update counter

    if (counter < 16) {
        counter++;
    } else {
        //workingval = baseval;
        counter = 0;
    }

} else if (inlet_trig == 0) {
	ntrig = 0;
	flippulse = false;
}

////////////////////
// Pattern Output //
////////////////////

outlet_pattern = outval << 20;
outlet_flip = flippulse;


    ]]></code.krate>
   </obj.normal>
</objdefs>
