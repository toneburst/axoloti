<objdefs appVersion="1.0.8">
   <obj.normal id="turing2" uuid="f4aa372926415b6fc796e993dde554a273a022ac">
      <sDescription>16bit Shift-register pattern generator, based on Music Thing Turing machine Eurorack module, with extras</sDescription>
      <author>toneburst</author>
      <license>BSD</license>
      <helpPatch>turing2.axh</helpPatch>
      <inlets>
         <int32.positive name="seed" description="Seed value (16 bit integer)"/>
         <frac32buffer name="noise" description="Noise input (s-rate)"/>
         <bool32 name="direction" description="Shift-register read-direction"/>
         <bool32 name="evolve" description="Reset seed every 16 steps, or allow sequence to evolve"/>
         <bool32.rising name="clock" description="Clock pulse"/>
         <bool32.rising name="reset" description="Reset pulse"/>
         <bool32.rising name="load" description="Load seed bits"/>
         <bool32.rising name="flip" description="Flip current bit"/>
      </inlets>
      <outlets>
         <frac32.bipolar name="pattern" description="Pattern out (bipolar)"/>
         <int32.positive name="state" description="16bit shift-register state"/>
         <bool32 name="flip" description="Pulse on bit-flip"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="randomness" description="Bit-flip threshold" noLabel="true"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[

//////////////////////
// Global Variables //
//////////////////////

// Toggles
bool init    = 1;  // Init toggle
bool ctrig   = 0;  // Clock-pulse toggle
bool rtrig   = 0;  // stepcounter-reset toggle
bool ltrig   = 0;  // Load seed toggle
bool ftrig   = 0;  // Bit-flip toggle
int32_t rval = 0;  // Previous noise-threshold value
bool dbool   = false; // Previous direction value

// State variables
int stepcounter       = 0;    // Step counter
int noisecounter     = 0;    // Noise array position counter
uint16_t baseval     = 0;    // Base bits
uint16_t workingval  = 0;    // Working bits
uint16_t state       = 0;    // Shift-register state

uint32_t states[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int32_t noise[16]   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
bool flippulses[16] = {false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false};

// Output values
int32_t outval = 0;         // Output value current step
bool flippulse = false;     // Bit-flip pulse state

///////////////////////
// Utility Functions //
///////////////////////

// Rotate bits, with wrapping
uint16_t rotate_right(uint16_t val, uint8_t shift) {
	return (val << shift) | (val >> (15 - shift));
}

// Toggle bit x
// http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
uint16_t togglebitx(uint16_t val, uint8_t x) {
	return val ^= 1 << x;
}

// Reverse bit-order of 16-bit word
// http://stackoverflow.com/questions/2602823/in-c-c-whats-the-simplest-way-to-reverse-the-order-of-bits-in-a-byte
uint16_t reversebits16(uint16_t val) {
    uint16_t reversed = val;
    for(uint8_t i = 0; i < 16; i++)
        reversed |= ((val >> i) & 1) << (15 - i);
    return reversed;
}

void makesequence() {
    for(uint8_t i = stepcounter; i < 16; i++) {
        // Toggle wrapped bits if noise inlet value lower than noise threshold value
        if (noise[i] < rval) {
            workingval = togglebitx(workingval, i);
            // Send out flip pulse (not sure what this will be useful for, yet)
            flippulses[i] = true;
        }
        // State output value
        states[i] = rotate_right(workingval, i);
        // Reverse bits if 'direction' input true
        if (dbool) {
            states[i] = reversebits16(states[i]);
        }
    }
}

           ]]></code.declaration>
      <code.krate><![CDATA[

///////////////////////////////
// Loop Running For 1st Time //
///////////////////////////////

if (init) {
	baseval = inlet_seed;
	workingval = baseval;
	init = false;
}

///////////////
// Load Seed //
///////////////

if ((inlet_load) && !ltrig) {
	baseval = inlet_seed;
	workingval = baseval;
    makesequence();
	ltrig = false;
} else if (!inlet_load) {
	ltrig = false;
}

/////////////////////////////
// Reset Input Rising Edge //
/////////////////////////////

if (inlet_reset && !rtrig) {
	stepcounter = 0;
	rtrig = true;
} else if (inlet_reset) {
	rtrig = false;
}

////////////////////////////////////////
// Flip Current First Bit Rising Edge //
////////////////////////////////////////

if (inlet_flip && !ftrig) {
    workingval = togglebitx(workingval, stepcounter);
    makesequence();
	ftrig = true;
} else if (inlet_flip) {
	ftrig = false;
}

/////////////////////////////
// Clock Input Rising Edge //
/////////////////////////////

if (inlet_clock && !ctrig && !init) {
    // Refresh state and flip-pulse arrays if stepcounter = 0
    if (stepcounter == 0) {
        // Reset working bits if evolve option not set
        if (!inlet_evolve)
            workingval = baseval;
        makesequence();
    } else if (rval != param_randomness) {
    // Refresh arrays if randomness param changes
        rval = param_randomness;
        makesequence();
    } else if (dbool != inlet_direction) {
    // Refresh arrays if direction param changes
        dbool = inlet_direction;
        makesequence();
    }
    // Output value (-128 to +128 range)
    outval = (states[stepcounter] >> 8) - 128;
    // Flip output
    flippulse = flippulses[stepcounter];
    // Update stepcounter
	stepcounter = (stepcounter < 15) ? stepcounter + 1 : 0;
    // Set toggle
    ctrig = true;
} else if (inlet_clock == 0) {
    // Set flip pulse low
    flippulse = false;
    // Reset toggle
    ctrig = false;
}

////////////////////
// Pattern Output //
////////////////////

outlet_pattern = outval << 20;
outlet_state = states[stepcounter];
outlet_flip = flippulse;

    ]]></code.krate>
      <code.srate><![CDATA[

// Update noise array counter
noisecounter = (noisecounter < 15) ? noisecounter + 1 : 0;
// Write to noise array
noise[noisecounter] = inlet_noise;

   ]]></code.srate>
   </obj.normal>
</objdefs>
