<objdefs appVersion="1.0.8">
    <obj.normal id="turing1" uuid="f4aa3eb926415b6fc796e576dde554a273a022ac" sha="dd90350d5d9fb8162e8bc1ce69ec962871607f0c">
        <upgradeSha>6a81606bcc6a29c922835f893193c4ff3d14c5a</upgradeSha>
        <sDescription>Shift-register pattern generator, based on Music Thing Turing machine Eurorack module</sDescription>
        <author>toneburst</author>
        <license>BSD</license>
        <helpPatch>nmpgen3.axh</helpPatch>
        <inlets>
            <bool32.rising name="trig" description="Trigger Pulse" />
            <bool32.rising name="r" description="Reset Pulse" />
            <bool32.rising name="loadseed" description="Load New Seed" />
        </inlets>
        <outlets>
            <frac32.bipolar name="pattern" description="Pattern Out (Bipolar)" />
            <bool32 name="trigger" description="Trigger Pattern (Bool)"/>
        </outlets>
        <displays />
        <params>
            <frac32.u.map name="seed" description="Seed Number" />
            <frac32.u.map name="offset" description="Pattern Offset" />
        </params>
        <attribs>
        </attribs>
        <code.declaration><![CDATA[

int32_t counter = 0;
int32_t offset = 0;
int ntrig = 0;
int rtrig = 0;
int32_t bindex;
int32_t pindex;
int32_t outval;
int ppos = 0;
int init = 1;

///////////////////////
// Utility Functions //
///////////////////////

// Return Max of 2 values
int32_t max(int32_t minval, int32_t val) {
    return(val >= minval) ? val : minval;
}

// Return Min of 2 values
int32_t min(int32_t maxval, int32_t val) {
    return(val <= maxval) ? val : maxval;
}

// Calculate pattern length based on param_length
int32_t calculatelength(int32_t len) {
    // Max 32 steps
    return max(minlength, len >> 22);
}

// Calculate step-offset value based on param_offset
int32_t calculateoffset(int32_t offs, int32_t maxoffs) {
    // Max 32 steps
    return min(offs >> 22, maxoffs);
}

/////////////////////////////////////////////////////////////////////////
// Seeded Random Number Generator ///////////////////////////////////////
// http://blog.embedded-office.com/en/blog-artikel/items/random-1.html //
// (cryptographically rubbish, but should be fine for our porpoises) ////
/////////////////////////////////////////////////////////////////////////

int32_t a = 5;
int32_t b = 12345;
int32_t m = 511;
int32_t rstate = 1;

int32_t updatestate() {
	rstate = ((rstate * a + b) % m) - 255;
	return rstate;
}

//////////////////////////
// Update Pattern Array //
//////////////////////////

void newpattern(int32_t a, int32_t b) {
	rstate = a * 64 + b;
	for(int i = 0; i < 32; i++) {
		pattern[i] = updatestate();
	}
}

        ]]>
        </code.declaration>
        <code.krate><![CDATA[

///////////////////////////////
// Loop Running For 1st Time //
///////////////////////////////

if (init == 1) {
    newpattern(param_bank, param_index);
    bindex = param_bank;
    pindex = param_index;
    length = calculatelength(param_length);
    offset = calculateoffset(param_offset, length);
	init = 0;
}

/////////////////////////////
// Reset Input Rising Edge //
/////////////////////////////

if ((inlet_r > 0) && !rtrig) {
    rtrig = 1;
    counter = 0;
} else if (!(inlet_r > 0)) {
    rtrig = 0;
}

///////////////////////////////
// Trigger Input Rising Edge //
///////////////////////////////

if ((inlet_trig > 0) && !ntrig) {
    // Check for changes to parameters
    // and regenerate array if params changed
	if ((param_bank != bindex) || (param_index != pindex)) {
		newpattern(param_bank, param_index);
		bindex = param_bank;
		pindex = param_index;
	}
    // Calculate length and offset
    length = calculatelength(param_length);
    offset = calculateoffset(param_offset, length);

    // Lookup position in pattern table
    ppos = (counter + offset) % length;

    // Set output value until next trigger
    outval = pattern[ppos];

    // Set output trigger for step (read from pattern table backwards)
    if((pattern[length - ppos] + 255) < (param_trigthresh >> 18))
        outtrig = true;

    // Update counter
    counter++;
    ntrig = 1;

} else if (inlet_trig == 0) {
    ntrig = 0;
    outtrig = false;
}

////////////////////
// Pattern Output //
////////////////////

outlet_pattern = outval << 19;

////////////////////
// Trigger Output //
////////////////////

outlet_trigger = outtrig;

    ]]>
    </code.krate>
    </obj.normal>
</objdefs>
