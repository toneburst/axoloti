<objdefs appVersion="1.0.8">
   <obj.normal id="toneburst/pattern/turing1" uuid="f4aa3eb926415b6fc796e576dde554a273a022ac">
      <sDescription>Shift-register pattern generator, based on Music Thing Turing machine Eurorack module</sDescription>
      <author>toneburst</author>
      <license>BSD</license>
      <helpPatch>nmpgen3.axh</helpPatch>
      <inlets>
         <int32.positive name="seed" description="Seed Bits"/>
         <bool32.rising name="trig" description="Trigger Pulse"/>
         <bool32.rising name="r" description="Reset Pulse"/>
         <bool32.rising name="l" description="Load New Seed"/>
         <frac32.bipolar name="n" description="Noise"/>
      </inlets>
      <outlets>
         <frac32.bipolar name="pattern" description="Pattern Out (Bipolar)"/>
         <bool32 name="trigger" description="Trigger Pattern (Bool)"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="rand" description="Randomness" noLabel="true"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[

int init = 1;
int ntrig = 0;
int rtrig = 0;
int ltrig = 0;

uint8_t counter = 0;
int32_t length = 8;
int32_t offset = 0;
uint8_t currentval = 1;
int32_t outval = 0;
bool outtrig = false;

///////////////////////
// Utility Functions //
///////////////////////

uint8_t rotate_right(uint8_t val, uint8_t shift) {
	return (val << shift) | (val >> (8 - shift));
}

uint8_t rotate_left(uint8_t val, uint8_t shift) {
	return (val << (8 - shift)) | (val >> shift);
}

// http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c

uint8_t togglebit0(uint8_t val) {
	return val ^= 1 << 0;
}

uint8_t togglebit7(uint8_t val) {
	return val ^= 1 << 7;
}

uint8_t getleftbyte(uint16_t word) {
    return word >> 8;
}

uint8_t getrightbyte(uint16_t word) {
    return (word << 8) >> 8;
}


           ]]></code.declaration>
      <code.krate><![CDATA[

///////////////////////////////
// Loop Running For 1st Time //
///////////////////////////////

if (init == 1) {

	init = 0;
}

/////////////////////////////
// Reset Input Rising Edge //
/////////////////////////////

if ((inlet_r > 0) && !rtrig) {
	rtrig = 1;
	counter = 0;
} else if (!(inlet_r > 0)) {
	rtrig = 0;
}

///////////////////////////////
// Trigger Input Rising Edge //
///////////////////////////////

if ((inlet_trig > 0) && !ntrig) {

    if (inlet_n < param_rand)
        currentval = togglebit0(currentval);

	// Set output value until next trigger
	outval = rotate_right(currentval, counter);
    outval = outval - 128;

	// Update counter
	counter = (counter < length - 1) ? counter + 1 : 0;

	ntrig = 1;

} else if (inlet_trig == 0) {
	ntrig = 0;
	outtrig = false;
}

////////////////////
// Pattern Output //
////////////////////

outlet_pattern = outval << 19;


    ]]></code.krate>
   </obj.normal>
</objdefs>