<patch-1.0 appVersion="1.0.10">
   <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr_1" x="420" y="126">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="-64.0"/>
         <frac32.u.map name="s" value="64.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="Volume" x="546" y="224">
      <params>
         <frac32.u.map name="value" value="37.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="196" y="252" text="Velocity mapped to phoneme"/>
   <obj type="midi/in/keyb zone touch" uuid="b50844801544a4d92e447c983cf5c3acafbbdf17" name="Keyboard" x="210" y="280">
      <params/>
      <attribs>
         <spinner attributeName="startNote" value="24"/>
         <spinner attributeName="endNote" value="60"/>
      </attribs>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="546" y="322">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="3ac307b9f782049739ed62504081b96d580ea336" name="*_1" x="630" y="322">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="Output" x="700" y="322">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="50252309-aab7-4df7-a50a-fc53d8226d6a" name="canto.axo_1" x="378" y="336">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
         <frac32.u.map name="phoneme" value="0.0"/>
         <frac32.u.map name="formant" value="33.0"/>
         <frac32.u.map name="roughness" value="1.0"/>
         <frac32.u.map name="srate" value="0.0"/>
         <frac32.u.map name="glidetime" value="46.0"/>
      </params>
      <attribs>
         <combo attributeName="bank" selection="all phonemes"/>
      </attribs>
      <object id="patch/object" uuid="50252309-aab7-4df7-a50a-fc53d8226d6a">
         <sDescription>8-bit speech formant synthesiser, based on Cantarino Arduino sketch by Peter Knight</sDescription>
         <author>toneburst</author>
         <license>BSD</license>
         <helpPatch>canto.axh</helpPatch>
         <inlets>
            <frac32.bipolar name="pitch" description="pitch input"/>
            <frac32.positive name="phoneme" description="phoneme select"/>
            <frac32.positive name="formant" description="formant shift"/>
            <frac32.positive name="roughness"/>
            <frac32.positive name="srate"/>
            <bool32 name="glide" description="glide on/off"/>
            <frac32.positive name="glidetime" description="glide time"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="wave" description="waveform"/>
            <frac32 name="pindex" description="phoneme index"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch" description="pitch" noLabel="true"/>
            <frac32.u.map name="phoneme" description="phoneme select"/>
            <frac32.u.map name="formant" description="formant position"/>
            <frac32.u.map name="roughness" description="roughness amt"/>
            <frac32.u.map name="srate" description="sample-rate reduction"/>
            <frac32.u.map name="glidetime" description="glide time"/>
         </params>
         <attribs>
            <combo name="bank">
               <MenuEntries>
                  <string>all phonemes</string>
                  <string>vowels</string>
                  <string>consonants</string>
                  <string>noisy</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[

const int8_t sinCalc[256] = {
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,2,2,3,3,4,5,6,7,8,10,12,14,17,20,24,
	0,4,4,5,6,7,9,11,13,15,18,22,26,31,37,45,
	0,5,6,7,8,10,12,14,17,20,24,28,34,41,49,58,
	0,5,6,7,9,10,12,15,18,21,26,31,37,44,53,63,
	0,5,6,7,8,10,12,14,17,20,24,28,34,41,49,58,
	0,4,4,5,6,7,9,11,13,15,18,22,26,31,37,45,
	0,2,2,3,3,4,5,6,7,8,10,12,14,17,20,24,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,-2,-2,-3,-3,-4,-5,-6,-7,-8,-10,-12,-14,-17,-20,-24,
	0,-4,-4,-5,-6,-7,-9,-11,-13,-15,-18,-22,-26,-31,-37,-45,
	0,-5,-6,-7,-8,-10,-12,-14,-17,-20,-24,-28,-34,-41,-49,-58,
	0,-5,-6,-7,-9,-10,-12,-15,-18,-21,-26,-31,-37,-44,-53,-63,
	0,-5,-6,-7,-8,-10,-12,-14,-17,-20,-24,-28,-34,-41,-49,-58,
	0,-4,-4,-5,-6,-7,-9,-11,-13,-15,-18,-22,-26,-31,-37,-45,
	0,-2,-2,-3,-3,-4,-5,-6,-7,-8,-10,-12,-14,-17,-20,-24
};

// Squarewave lookup-table
const int8_t sqrCalc[256] = {
	0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
	0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
	0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
	0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
	0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
	0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
	0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
	0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
	0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
	0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
	0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
	0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
	0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
	0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
	0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
	0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16
};

/*
Formant data (78)
The formant data has the following format:
[formant1 phase-increment],[f2 phase-incr],[f3 phase-incr],
[formant1 amplitude],[f2 amp],[f3 amp],
[noise-mod]
*/

const int8_t formantTable[78][7] = {
	{0x0, 0x0, 0x0,0x0,0x0,0x0,0x0},/*00 space*/	{0x13,0x43,0x5b,0x0,0x0,0x0,0x0},/*01 .*/
	{0x13,0x43,0x5b,0x0,0x0,0x0,0x0},/*02 ?*/		{0x13,0x43,0x5b,0x0,0x0,0x0,0x0},/*03 ,*/
	{0x13,0x43,0x5b,0x0,0x0,0x0,0x0},/*04 -*/		{0xa,0x54,0x6e,0xd,0xa,0x8,0x0},/*05 IY*/
	{0xe,0x49,0x5d,0xd,0x8,0x7,0x0},/*06 IH*/		{0x13,0x43,0x5b,0xe,0xd,0x8,0x0},/*07 EH*/
	{0x18,0x3f,0x58,0xf,0xe,0x8,0x0},/*08 AE*/		{0x1b,0x28,0x59,0xf,0xd,0x1,0x0},/*09 AA*/
	{0x17,0x2c,0x57,0xf,0xc,0x1,0x0},/*10 AH*/		{0x15,0x1f,0x58,0xf,0xc,0x0,0x0},/*11 AO*/
	{0x10,0x25,0x52,0xf,0xb,0x1,0x0},/*12 UH*/		{0x14,0x2c,0x57,0xe,0xb,0x0,0x0},/*13 AX*/
	{0xe,0x49,0x5d,0xd,0xb,0x7,0x0},/*14 IX*/		{0x12,0x31,0x3e,0xc,0xb,0x5,0x0},/*15 ER*/
	{0xe,0x24,0x52,0xf,0xc,0x1,0x0},/*16 UX*/		{0x12,0x1e,0x58,0xf,0xc,0x0,0x0},/*17 OH*/
	{0x12,0x33,0x3e,0xd,0xc,0x6,0x0},/*18 RX*/		{0x10,0x25,0x6e,0xd,0x8,0x1,0x0},/*19 LX*/
	{0xd,0x1d,0x50,0xd,0x8,0x0,0x0},/*20 WX*/		{0xf,0x45,0x5d,0xe,0xc,0x7,0x0},/*21 YX*/
	{0xb,0x18,0x5a,0xd,0x8,0x0,0x0},/*22 WH*/		{0x12,0x32,0x3c,0xc,0xa,0x5,0x0},/*23 R*/
	{0xe,0x1e,0x6e,0xd,0x8,0x1,0x0},/*24 L*/		{0xb,0x18,0x5a,0xd,0x8,0x0,0x0},/*25 W*/
	{0x9,0x53,0x6e,0xd,0xa,0x8,0x0},/*26 Y*/		{0x6,0x2e,0x51,0xc,0x3,0x0,0x0},/*27 M*/
	{0x6,0x36,0x79,0x9,0x9,0x0,0x0},/*28 N*/		{0x6,0x56,0x65,0x9,0x6,0x3,0x0},/*29 NX*/
	{0x6,0x36,0x79,0x0,0x0,0x0,0x0},/*30 DX*/		{0x11,0x43,0x5b,0x0,0x0,0x0,0x0},/*31 Q*/
	{0x6,0x49,0x63,0x7,0xa,0xd,0xf},/*32 S*/		{0x6,0x4f,0x6a,0x0,0x0,0x0,0x0},/*33 SH*/
	{0x6,0x1a,0x51,0x3,0x3,0x3,0xf},/*34 F*/		{0x6,0x42,0x79,0x0,0x0,0x0,0x0},/*35 TH*/
	{0xe,0x49,0x5d,0x0,0x0,0x0,0x0},/*36 /H*/		{0x10,0x25,0x52,0x0,0x0,0x0,0x0},/*37 /X*/
	{0x9,0x33,0x5d,0xf,0x3,0x0,0x3},/*38 Z*/		{0xa,0x42,0x67,0xb,0x5,0x1,0x0},/*39 ZH*/
	{0x8,0x28,0x4c,0xb,0x3,0x0,0x0},/*40 V*/		{0xa,0x2f,0x5d,0xb,0x4,0x0,0x0},/*41 DH*/
	{0x6,0x4f,0x65,0x0,0x0,0x0,0x0},/*42 CHa*/		{0x6,0x4f,0x65,0x0,0x0,0x0,0x0},/*43 CHb*/
	{0x6,0x42,0x79,0x1,0x0,0x0,0x0},/*44 Ja*/		{0x5,0x42,0x79,0x1,0x0,0x0,0x0},/*45 Jb*/
	{0x6,0x6e,0x79,0x0,0xa,0xe,0x0},/*46 Jc*/		{0x0, 0x0, 0x0,0x2,0x2,0x1,0x0},/*47 Jd*/
	{0x13,0x48,0x5a,0xe,0xe,0x9,0x0},/*48 EY*/		{0x1b,0x27,0x58,0xf,0xd,0x1,0x0},/*49 AY*/
	{0x15,0x1f,0x58,0xf,0xc,0x0,0x0},/*50 OY*/		{0x1b,0x2b,0x58,0xf,0xd,0x1,0x0},/*51 AW*/
	{0x12,0x1e,0x58,0xf,0xc,0x0,0x0},/*52 OW*/		{0xd,0x22,0x52,0xd,0x8,0x0,0x0},/*53 UW*/
	{0x6,0x1a,0x51,0x2,0x0,0x0,0x0},/*54 Ba*/		{0x6,0x1a,0x51,0x4,0x1,0x0,0xf},/*55 Bb*/
	{0x6,0x1a,0x51,0x0,0x0,0x0,0x0},/*56 Bc*/		{0x6,0x42,0x79,0x2,0x0,0x0,0x0},/*57 Da*/
	{0x6,0x42,0x79,0x4,0x1,0x0,0xf},/*58 Db*/		{0x6,0x42,0x79,0x0,0x0,0x0,0x0},/*59 Dc*/
	{0x6,0x6e,0x70,0x1,0x0,0x0,0x0},/*60 Ga*/		{0x6,0x6e,0x6e,0x4,0x1,0x0,0xf},/*61 Gb*/
	{0x6,0x6e,0x6e,0x0,0x0,0x0,0x0},/*62 Gc*/		{0x6,0x54,0x5e,0x1,0x0,0x0,0x0},/*63 GXa*/
	{0x6,0x54,0x5e,0x4,0x1,0x0,0xf},/*64 GXb*/		{0x6,0x54,0x5e,0x0,0x0,0x0,0x0},/*65 GXc*/
	{0x6,0x1a,0x51,0x0,0x0,0x0,0x0},/*66 Pa*/		{0x6,0x1a,0x51,0x0,0x0,0x0,0x0},/*67 Pb*/
	{0x6,0x1a,0x51,0x0,0x0,0x0,0x0},/*68 Pc*/		{0x6,0x42,0x79,0x0,0x0,0x0,0x0},/*69 Ta*/
	{0x6,0x42,0x79,0x0,0x0,0x0,0x0},/*70 Tb*/		{0x6,0x42,0x79,0x0,0x0,0x0,0x0},/*71 Tc*/
	{0x6,0x6d,0x65,0x0,0x0,0x0,0x0},/*72 Ka*/		{0xa,0x56,0x65,0xc,0xa,0x7,0x0},/*73 Kb*/
	{0xa,0x6d,0x70,0x0,0x0,0x0,0x0},/*74 Kc*/		{0x6,0x54,0x5e,0x0,0x0,0x0,0x0},/*75 KXa*/
	{0x6,0x54,0x5e,0x0,0xa,0x5,0x0},/*76 KXb*/		{0x26,0x54,0x5e,0x20,0x20,0x0,0x0}/*77 KXc*/
};

// All audible phonemes (73)
const int8_t phonemes[73] = {
	5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,
	21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,
	37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,
	53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,
	69,70,71,72,73,74,75,76,77,	
};

// Vowel indices (19)
const int8_t vowels[19] = {
	5,6,7,8,9,10,11,12,13,14,16,17,21,48,49,50,51,52,53
};

// Consonant indices (54)
const int8_t consonants[54] = {
	15,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,
	35,36,37,38,39,40,41,42,43,44,45,46,47,54,55,56,57,
	58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,
	75,76,77
};

// Noisy indices (7)
const int8_t noisy[7] = {
	32,34,38,55,58,61,65
};

// Sample-rate reduction divisor table
const int8_t srateTable[8] = {1,2,4,8,16,32,64,128};


//////////////////////
// GLOBAL VARIABLES //
//////////////////////

// Oscillator phases
uint32_t pitchPhase, pitchPhaseInc;
uint16_t form1Phase,form2Phase,form3Phase;
// Phase-increment values
uint16_t form1PhaseInc,form2PhaseInc,form3PhaseInc;
// Formant amplitudes
uint8_t form1Amp,form2Amp,form3Amp;
// Noise modulation
uint8_t noiseMod;

// Phoneme selection
int8_t phoneme;
int8_t oldPhoneme;
int8_t phonemeTableLen;
// Phoneme index table pointer
const int8_t *phonemeTablePtr;

// Formant shift param
uint8_t formantScale;
// Roughness
uint8_t roughness;
// Sample-rate reduction divisor
uint8_t srateDivisor;
// Sample-rate counter (counts render loops)
uint8_t srateCounter;
// Formant glide-time
uint32_t glideTime;
// Stores 'noise' value for phase-reset in render loop
int8_t noise;
// Store final output value
int8_t outValue;

// Slew states and pointers
// Pitch phase-increment
int32_t pitchSlewState;	int32_t *pitchSlewStatePtr = NULL;
// Formant phase-increment
int32_t f1pSlewState;	int32_t *f1pSlewStatePtr = NULL;
int32_t f2pSlewState;	int32_t *f2pSlewStatePtr = NULL;
int32_t f3pSlewState;	int32_t *f3pSlewStatePtr = NULL;
//  Formant amplitude
int32_t f1aSlewState;	int32_t *f1aSlewStatePtr = NULL;
int32_t f2aSlewState;	int32_t *f2aSlewStatePtr = NULL;
int32_t f3aSlewState;	int32_t *f3aSlewStatePtr = NULL;
// Noise-mod
int32_t fmSlewState;	int32_t *fmSlewStatePtr  = NULL;

///////////////
// Functions //
///////////////

// Slew function, with pointer to state variable
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t slew(int32_t target, int32_t *state, int32_t slewTime, bool enable) {
	if (enable) {
		*state = ___SMMLA(*state - target, (-1 << 26) + (slewTime >> 1), *state);
		return *state;
	} else {
		*state = target;
		return target;
	};
};

// Scale input to range out_min > out_max
// Input range hard-coded to 0 > 134217727 (27 bits) for frac32.pos inlets / frac32.u.map params
// WONT'T Work with bipolar input!
__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t range_pos(int32_t val, int32_t out_min, int32_t out_max) {
	float x = (float)val;
	float outMin = (float)out_min;
	float outMax = (float)out_max;
	return (int32_t)(x * (outMax - outMin) / 0x07FFFFFF + outMin);
};


]]></code.declaration>
         <code.init><![CDATA[

// Assign sample-rate vars
srateDivisor = 1;
srateCounter = 0;

// Assign slew-state pointers
pitchSlewStatePtr = &pitchSlewState;
f1pSlewStatePtr   = &f1pSlewState;
f2pSlewStatePtr   = &f2pSlewState;
f3pSlewStatePtr   = &f3pSlewState;
f1aSlewStatePtr   = &f1aSlewState;
f2aSlewStatePtr   = &f2aSlewState;
f3aSlewStatePtr   = &f3aSlewState;
fmSlewStatePtr    = &fmSlewState;

// Phoneme bank select
switch(attr_bank) {
	case 0  :
		phonemeTablePtr = &phonemes[0];
		phonemeTableLen = 72;
		break;
	case 1  :
		phonemeTablePtr = &vowels[0];
		phonemeTableLen = 18;
		break;
	case 2  :
		phonemeTablePtr = &consonants[0];
		phonemeTableLen = 53;
		break;
	case 3  :
		phonemeTablePtr = &noisy[0];
		phonemeTableLen = 6;
		break;
};

phoneme = 0;
oldPhoneme = 1;]]></code.init>
         <code.krate><![CDATA[

///////////////////////////
// Process params/inlets //
///////////////////////////

// Phoneme selection
//if(oldPhoneme != phoneme) {
	phoneme = range_pos(__USAT(param_phoneme + inlet_phoneme, 27), 0, phonemeTableLen);
	phoneme = *(phonemeTablePtr + phoneme);
	//oldPhoneme = phoneme;
//};


// Shift/scale formant
formantScale = (__USAT(param_formant + inlet_formant, 27) >> 20) +5;

// Roughness
roughness = __USAT(param_roughness + inlet_roughness, 27) >> 23;

// Sample-rate divisor
srateDivisor = srateTable[__USAT(param_srate + inlet_srate, 27) >> 24];

// Glide-time
glideTime = __USAT(param_glidetime + inlet_glidetime, 27);

//////////////////////////////////
// Read formant vals from table //
//////////////////////////////////

// Calculate formant phase-increment | amp | noise-mod
// Pass result through slew function, with bit-shifting to/from 32-bit
form1PhaseInc = slew((formantTable[phoneme][0]*formantScale)<<16,f1pSlewStatePtr,glideTime,inlet_glide)>>16;
form2PhaseInc = slew((formantTable[phoneme][1]*formantScale)<<16,f2pSlewStatePtr,glideTime,inlet_glide)>>16;
form3PhaseInc = slew((formantTable[phoneme][2]*formantScale)<<16,f3pSlewStatePtr,glideTime,inlet_glide)>>16;
form1Amp = slew(formantTable[phoneme][3]<<24,f1aSlewStatePtr,glideTime,inlet_glide)>>24;
form2Amp = slew(formantTable[phoneme][4]<<24,f2aSlewStatePtr,glideTime,inlet_glide)>>24;
form3Amp = slew(formantTable[phoneme][5]<<24,f3aSlewStatePtr,glideTime,inlet_glide)>>24;
noiseMod = slew(formantTable[phoneme][6]<<24,fmSlewStatePtr,glideTime,inlet_glide)>>24;

// Calculate base pitch phase-increment
MTOFEXTENDED(param_pitch + inlet_pitch, pitchPhaseInc);
pitchPhaseInc = slew(pitchPhaseInc, pitchSlewStatePtr, param_glidetime, inlet_glide);

////////////////////////
// Fill Sample Buffer //
////////////////////////

for(uint8_t j = 0; j < BUFSIZE; j++) {
	// Final sample value
	int8_t value;

	// Noise
	int16_t phaseNoise = noise * (noiseMod + roughness);
	noise += noise << 2;
	noise++;

	// Accululate formants
	form1Phase += form1PhaseInc;
	value  = sinCalc[(((form1Phase >> 8) & 0xf0) | form1Amp)];
	form2Phase += form2PhaseInc;
	value += sinCalc[(((form2Phase >> 8) & 0xf0) | form2Amp)];
	form3Phase += form3PhaseInc;
	value += sqrCalc[(((form3Phase >> 8) & 0xf0) | form3Amp)];

	// Window formants with pitch phase-accumulator to calculate final sample value
	value = (value * (0xff^(pitchPhase >> 24))) >> 8;
	pitchPhase += pitchPhaseInc;

	// Reset phase-increment for next loop iteration to simulate noise
	// if phoneme definition requires
	if ((pitchPhase + (phaseNoise << 16)) < pitchPhaseInc) {
		form1Phase = 0;
		form2Phase = 0;
		form3Phase = 0;
	};

	// Sample-rate reduction
	// (only update sample value if mod(counter, divisor) = 0)
	if (srateCounter % srateDivisor == 0)
		outValue = value;

	// Write sample to buffer
	outlet_wave[j] = outValue << 20;

	// Increment render loop counter (for sample-rate reduction)
	srateCounter++;
};

// Send out phoneme index

outlet_pindex = phoneme;

]]></code.krate>
      </object>
   </patchobj>
   <obj type="disp/scope 128 b" uuid="2b69f51a714fc276503ef10c349d6d253d1ae5e2" name="Waveform" x="546" y="392">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="Glide" x="98" y="420">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="midi/in/keyb note" uuid="ac0cd98e6c0373b7be73d25900342a62ebcf5f" name="Glide Enable" x="238" y="434">
      <params/>
      <attribs>
         <spinner attributeName="note" value="23"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="210" y="532" text="Enable glidewith note 23"/>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_1" x="546" y="602">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="546" y="672" text="Index of phoneme in formant table (for debugging)"/>
   <nets>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="Output" inlet="left"/>
         <dest obj="Output" inlet="right"/>
      </net>
      <net>
         <source obj="canto.axo_1" outlet="wave"/>
         <dest obj="Waveform" inlet="in"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="canto.axo_1" outlet="pindex"/>
         <dest obj="hex_1" inlet="in"/>
      </net>
      <net>
         <source obj="Keyboard" outlet="note"/>
         <dest obj="canto.axo_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="Keyboard" outlet="velocity"/>
         <dest obj="canto.axo_1" inlet="phoneme"/>
      </net>
      <net>
         <source obj="adsr_1" outlet="env"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="Volume" outlet="out"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="*_1" inlet="b"/>
      </net>
      <net>
         <source obj="Keyboard" outlet="gate"/>
         <dest obj="adsr_1" inlet="gate"/>
      </net>
      <net>
         <source obj="Glide Enable" outlet="gate"/>
         <dest obj="canto.axo_1" inlet="glide"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>452</x>
      <y>35</y>
      <width>1698</width>
      <height>1178</height>
   </windowPos>
</patch-1.0>